/*
 * Copyright (c) 2021 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/dpdk.proto

package dpdkproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DPDKonmetalClient is the client API for DPDKonmetal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DPDKonmetalClient interface {
	//// INITIALIZATION
	// initialized indicates if the DPDK app has been initialized already.
	Initialized(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolMsg, error)
	// init will be called once for initial set up of the DPDK app.
	// init returns an error if the DPDK app has been initialized already. So check if it got initialized before calling init.
	Init(ctx context.Context, in *InitConfig, opts ...grpc.CallOption) (*Status, error)
	//// MACHINES
	ListMachines(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MachinesMsg, error)
	// addMachine creates and configures a VF (hypervisor case) or PF (bare metal) for the new machine.
	// If the machine's VNet is not known to the DPDK app yet, the VNet and its routing table will be intialized.
	// After calling addMachine() the Client has to make sure that the routing table of the corresponding VNet is filled (use listRoutes and addRoute as required).
	AddMachine(ctx context.Context, in *AddMachineRequest, opts ...grpc.CallOption) (*AddMachineResponse, error)
	// deleteMachine removes all networking configuration of a machine from the DPDK app.
	// The VF will be released and can be reused for other VMs.
	// If the machine was the last machine of a VNet on this hypervisor, the VNet and its routes will be freed from the DPDK app.
	DeleteMachine(ctx context.Context, in *MachineIDMsg, opts ...grpc.CallOption) (*Status, error)
	// updateThrottlingConfig changes a machine's throttling configuration during runtime.
	UpdateThrottlingConfig(ctx context.Context, in *ThrottlingConfigMsg, opts ...grpc.CallOption) (*Status, error)
	// listMachinePrefixes returns a list of prefixes, that will be routed to the machine by the DPDK app.
	// For example this could be a node's Kubernetes Pod CIDR.
	ListMachinePrefixes(ctx context.Context, in *MachineIDMsg, opts ...grpc.CallOption) (*PrefixesMsg, error)
	AddMachinePrefix(ctx context.Context, in *MachinePrefixMsg, opts ...grpc.CallOption) (*Status, error)
	DeleteMachinePrefix(ctx context.Context, in *MachinePrefixMsg, opts ...grpc.CallOption) (*Status, error)
	// NAT related, add/get/del Virtual IP for a given Machine
	AddMachineVIP(ctx context.Context, in *MachineVIPMsg, opts ...grpc.CallOption) (*Status, error)
	GetMachineVIP(ctx context.Context, in *MachineIDMsg, opts ...grpc.CallOption) (*MachineVIPIP, error)
	DelMachineVIP(ctx context.Context, in *MachineIDMsg, opts ...grpc.CallOption) (*Status, error)
	// LB related, add/list/del backend IPs for a given LB IP
	AddLBVIP(ctx context.Context, in *LBMsg, opts ...grpc.CallOption) (*Status, error)
	GetLBVIPBackends(ctx context.Context, in *LBQueryMsg, opts ...grpc.CallOption) (*LBBackendMsg, error)
	DelLBVIP(ctx context.Context, in *LBMsg, opts ...grpc.CallOption) (*Status, error)
	//// ROUTES
	ListRoutes(ctx context.Context, in *VNIMsg, opts ...grpc.CallOption) (*RoutesMsg, error)
	// addRoutes adds a new route to a VNet's routing table (identified by VNI).
	// If the DPDK application does not hold any machine in the specified VNet, an error will be returned.
	AddRoute(ctx context.Context, in *VNIRouteMsg, opts ...grpc.CallOption) (*Status, error)
	// deleteRoute removes a route from a VNet.
	// If the route does not exist, an error will be returned.
	DeleteRoute(ctx context.Context, in *VNIRouteMsg, opts ...grpc.CallOption) (*Status, error)
	//// FIREWALL
	ListFirewallRules(ctx context.Context, in *MachineIDMsg, opts ...grpc.CallOption) (*FirewallRulesMsg, error)
	AddFirewallRule(ctx context.Context, in *FirewallRuleMsg, opts ...grpc.CallOption) (*Status, error)
	DeleteFirewallRule(ctx context.Context, in *RuleIDMsg, opts ...grpc.CallOption) (*Status, error)
	QueryHelloWorld(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error)
}

type dPDKonmetalClient struct {
	cc grpc.ClientConnInterface
}

func NewDPDKonmetalClient(cc grpc.ClientConnInterface) DPDKonmetalClient {
	return &dPDKonmetalClient{cc}
}

func (c *dPDKonmetalClient) Initialized(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolMsg, error) {
	out := new(BoolMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/initialized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) Init(ctx context.Context, in *InitConfig, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListMachines(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MachinesMsg, error) {
	out := new(MachinesMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/listMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddMachine(ctx context.Context, in *AddMachineRequest, opts ...grpc.CallOption) (*AddMachineResponse, error) {
	out := new(AddMachineResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteMachine(ctx context.Context, in *MachineIDMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/deleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) UpdateThrottlingConfig(ctx context.Context, in *ThrottlingConfigMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/updateThrottlingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListMachinePrefixes(ctx context.Context, in *MachineIDMsg, opts ...grpc.CallOption) (*PrefixesMsg, error) {
	out := new(PrefixesMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/listMachinePrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddMachinePrefix(ctx context.Context, in *MachinePrefixMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addMachinePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteMachinePrefix(ctx context.Context, in *MachinePrefixMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/deleteMachinePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddMachineVIP(ctx context.Context, in *MachineVIPMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addMachineVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetMachineVIP(ctx context.Context, in *MachineIDMsg, opts ...grpc.CallOption) (*MachineVIPIP, error) {
	out := new(MachineVIPIP)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/getMachineVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DelMachineVIP(ctx context.Context, in *MachineIDMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/delMachineVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddLBVIP(ctx context.Context, in *LBMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addLBVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetLBVIPBackends(ctx context.Context, in *LBQueryMsg, opts ...grpc.CallOption) (*LBBackendMsg, error) {
	out := new(LBBackendMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/getLBVIPBackends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DelLBVIP(ctx context.Context, in *LBMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/delLBVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListRoutes(ctx context.Context, in *VNIMsg, opts ...grpc.CallOption) (*RoutesMsg, error) {
	out := new(RoutesMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/listRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddRoute(ctx context.Context, in *VNIRouteMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteRoute(ctx context.Context, in *VNIRouteMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/deleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListFirewallRules(ctx context.Context, in *MachineIDMsg, opts ...grpc.CallOption) (*FirewallRulesMsg, error) {
	out := new(FirewallRulesMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/listFirewallRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddFirewallRule(ctx context.Context, in *FirewallRuleMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteFirewallRule(ctx context.Context, in *RuleIDMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/deleteFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) QueryHelloWorld(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/QueryHelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DPDKonmetalServer is the server API for DPDKonmetal service.
// All implementations must embed UnimplementedDPDKonmetalServer
// for forward compatibility
type DPDKonmetalServer interface {
	//// INITIALIZATION
	// initialized indicates if the DPDK app has been initialized already.
	Initialized(context.Context, *Empty) (*BoolMsg, error)
	// init will be called once for initial set up of the DPDK app.
	// init returns an error if the DPDK app has been initialized already. So check if it got initialized before calling init.
	Init(context.Context, *InitConfig) (*Status, error)
	//// MACHINES
	ListMachines(context.Context, *Empty) (*MachinesMsg, error)
	// addMachine creates and configures a VF (hypervisor case) or PF (bare metal) for the new machine.
	// If the machine's VNet is not known to the DPDK app yet, the VNet and its routing table will be intialized.
	// After calling addMachine() the Client has to make sure that the routing table of the corresponding VNet is filled (use listRoutes and addRoute as required).
	AddMachine(context.Context, *AddMachineRequest) (*AddMachineResponse, error)
	// deleteMachine removes all networking configuration of a machine from the DPDK app.
	// The VF will be released and can be reused for other VMs.
	// If the machine was the last machine of a VNet on this hypervisor, the VNet and its routes will be freed from the DPDK app.
	DeleteMachine(context.Context, *MachineIDMsg) (*Status, error)
	// updateThrottlingConfig changes a machine's throttling configuration during runtime.
	UpdateThrottlingConfig(context.Context, *ThrottlingConfigMsg) (*Status, error)
	// listMachinePrefixes returns a list of prefixes, that will be routed to the machine by the DPDK app.
	// For example this could be a node's Kubernetes Pod CIDR.
	ListMachinePrefixes(context.Context, *MachineIDMsg) (*PrefixesMsg, error)
	AddMachinePrefix(context.Context, *MachinePrefixMsg) (*Status, error)
	DeleteMachinePrefix(context.Context, *MachinePrefixMsg) (*Status, error)
	// NAT related, add/get/del Virtual IP for a given Machine
	AddMachineVIP(context.Context, *MachineVIPMsg) (*Status, error)
	GetMachineVIP(context.Context, *MachineIDMsg) (*MachineVIPIP, error)
	DelMachineVIP(context.Context, *MachineIDMsg) (*Status, error)
	// LB related, add/list/del backend IPs for a given LB IP
	AddLBVIP(context.Context, *LBMsg) (*Status, error)
	GetLBVIPBackends(context.Context, *LBQueryMsg) (*LBBackendMsg, error)
	DelLBVIP(context.Context, *LBMsg) (*Status, error)
	//// ROUTES
	ListRoutes(context.Context, *VNIMsg) (*RoutesMsg, error)
	// addRoutes adds a new route to a VNet's routing table (identified by VNI).
	// If the DPDK application does not hold any machine in the specified VNet, an error will be returned.
	AddRoute(context.Context, *VNIRouteMsg) (*Status, error)
	// deleteRoute removes a route from a VNet.
	// If the route does not exist, an error will be returned.
	DeleteRoute(context.Context, *VNIRouteMsg) (*Status, error)
	//// FIREWALL
	ListFirewallRules(context.Context, *MachineIDMsg) (*FirewallRulesMsg, error)
	AddFirewallRule(context.Context, *FirewallRuleMsg) (*Status, error)
	DeleteFirewallRule(context.Context, *RuleIDMsg) (*Status, error)
	QueryHelloWorld(context.Context, *Empty) (*Status, error)
	mustEmbedUnimplementedDPDKonmetalServer()
}

// UnimplementedDPDKonmetalServer must be embedded to have forward compatible implementations.
type UnimplementedDPDKonmetalServer struct {
}

func (UnimplementedDPDKonmetalServer) Initialized(context.Context, *Empty) (*BoolMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialized not implemented")
}
func (UnimplementedDPDKonmetalServer) Init(context.Context, *InitConfig) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedDPDKonmetalServer) ListMachines(context.Context, *Empty) (*MachinesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedDPDKonmetalServer) AddMachine(context.Context, *AddMachineRequest) (*AddMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachine not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteMachine(context.Context, *MachineIDMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (UnimplementedDPDKonmetalServer) UpdateThrottlingConfig(context.Context, *ThrottlingConfigMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThrottlingConfig not implemented")
}
func (UnimplementedDPDKonmetalServer) ListMachinePrefixes(context.Context, *MachineIDMsg) (*PrefixesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachinePrefixes not implemented")
}
func (UnimplementedDPDKonmetalServer) AddMachinePrefix(context.Context, *MachinePrefixMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachinePrefix not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteMachinePrefix(context.Context, *MachinePrefixMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachinePrefix not implemented")
}
func (UnimplementedDPDKonmetalServer) AddMachineVIP(context.Context, *MachineVIPMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMachineVIP not implemented")
}
func (UnimplementedDPDKonmetalServer) GetMachineVIP(context.Context, *MachineIDMsg) (*MachineVIPIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineVIP not implemented")
}
func (UnimplementedDPDKonmetalServer) DelMachineVIP(context.Context, *MachineIDMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMachineVIP not implemented")
}
func (UnimplementedDPDKonmetalServer) AddLBVIP(context.Context, *LBMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLBVIP not implemented")
}
func (UnimplementedDPDKonmetalServer) GetLBVIPBackends(context.Context, *LBQueryMsg) (*LBBackendMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLBVIPBackends not implemented")
}
func (UnimplementedDPDKonmetalServer) DelLBVIP(context.Context, *LBMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLBVIP not implemented")
}
func (UnimplementedDPDKonmetalServer) ListRoutes(context.Context, *VNIMsg) (*RoutesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedDPDKonmetalServer) AddRoute(context.Context, *VNIRouteMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteRoute(context.Context, *VNIRouteMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedDPDKonmetalServer) ListFirewallRules(context.Context, *MachineIDMsg) (*FirewallRulesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFirewallRules not implemented")
}
func (UnimplementedDPDKonmetalServer) AddFirewallRule(context.Context, *FirewallRuleMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFirewallRule not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteFirewallRule(context.Context, *RuleIDMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirewallRule not implemented")
}
func (UnimplementedDPDKonmetalServer) QueryHelloWorld(context.Context, *Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHelloWorld not implemented")
}
func (UnimplementedDPDKonmetalServer) mustEmbedUnimplementedDPDKonmetalServer() {}

// UnsafeDPDKonmetalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DPDKonmetalServer will
// result in compilation errors.
type UnsafeDPDKonmetalServer interface {
	mustEmbedUnimplementedDPDKonmetalServer()
}

func RegisterDPDKonmetalServer(s grpc.ServiceRegistrar, srv DPDKonmetalServer) {
	s.RegisterService(&DPDKonmetal_ServiceDesc, srv)
}

func _DPDKonmetal_Initialized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).Initialized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/initialized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).Initialized(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).Init(ctx, req.(*InitConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/listMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListMachines(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddMachine(ctx, req.(*AddMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/deleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteMachine(ctx, req.(*MachineIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_UpdateThrottlingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThrottlingConfigMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).UpdateThrottlingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/updateThrottlingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).UpdateThrottlingConfig(ctx, req.(*ThrottlingConfigMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListMachinePrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListMachinePrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/listMachinePrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListMachinePrefixes(ctx, req.(*MachineIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddMachinePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachinePrefixMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddMachinePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addMachinePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddMachinePrefix(ctx, req.(*MachinePrefixMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteMachinePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachinePrefixMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteMachinePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/deleteMachinePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteMachinePrefix(ctx, req.(*MachinePrefixMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddMachineVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineVIPMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddMachineVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addMachineVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddMachineVIP(ctx, req.(*MachineVIPMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetMachineVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetMachineVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/getMachineVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetMachineVIP(ctx, req.(*MachineIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DelMachineVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DelMachineVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/delMachineVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DelMachineVIP(ctx, req.(*MachineIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddLBVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddLBVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addLBVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddLBVIP(ctx, req.(*LBMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetLBVIPBackends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBQueryMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetLBVIPBackends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/getLBVIPBackends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetLBVIPBackends(ctx, req.(*LBQueryMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DelLBVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DelLBVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/delLBVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DelLBVIP(ctx, req.(*LBMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNIMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/listRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListRoutes(ctx, req.(*VNIMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNIRouteMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddRoute(ctx, req.(*VNIRouteMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNIRouteMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/deleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteRoute(ctx, req.(*VNIRouteMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListFirewallRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListFirewallRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/listFirewallRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListFirewallRules(ctx, req.(*MachineIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirewallRuleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddFirewallRule(ctx, req.(*FirewallRuleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/deleteFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteFirewallRule(ctx, req.(*RuleIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_QueryHelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).QueryHelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/QueryHelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).QueryHelloWorld(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DPDKonmetal_ServiceDesc is the grpc.ServiceDesc for DPDKonmetal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DPDKonmetal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dpdkonmetal.DPDKonmetal",
	HandlerType: (*DPDKonmetalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initialized",
			Handler:    _DPDKonmetal_Initialized_Handler,
		},
		{
			MethodName: "init",
			Handler:    _DPDKonmetal_Init_Handler,
		},
		{
			MethodName: "listMachines",
			Handler:    _DPDKonmetal_ListMachines_Handler,
		},
		{
			MethodName: "addMachine",
			Handler:    _DPDKonmetal_AddMachine_Handler,
		},
		{
			MethodName: "deleteMachine",
			Handler:    _DPDKonmetal_DeleteMachine_Handler,
		},
		{
			MethodName: "updateThrottlingConfig",
			Handler:    _DPDKonmetal_UpdateThrottlingConfig_Handler,
		},
		{
			MethodName: "listMachinePrefixes",
			Handler:    _DPDKonmetal_ListMachinePrefixes_Handler,
		},
		{
			MethodName: "addMachinePrefix",
			Handler:    _DPDKonmetal_AddMachinePrefix_Handler,
		},
		{
			MethodName: "deleteMachinePrefix",
			Handler:    _DPDKonmetal_DeleteMachinePrefix_Handler,
		},
		{
			MethodName: "addMachineVIP",
			Handler:    _DPDKonmetal_AddMachineVIP_Handler,
		},
		{
			MethodName: "getMachineVIP",
			Handler:    _DPDKonmetal_GetMachineVIP_Handler,
		},
		{
			MethodName: "delMachineVIP",
			Handler:    _DPDKonmetal_DelMachineVIP_Handler,
		},
		{
			MethodName: "addLBVIP",
			Handler:    _DPDKonmetal_AddLBVIP_Handler,
		},
		{
			MethodName: "getLBVIPBackends",
			Handler:    _DPDKonmetal_GetLBVIPBackends_Handler,
		},
		{
			MethodName: "delLBVIP",
			Handler:    _DPDKonmetal_DelLBVIP_Handler,
		},
		{
			MethodName: "listRoutes",
			Handler:    _DPDKonmetal_ListRoutes_Handler,
		},
		{
			MethodName: "addRoute",
			Handler:    _DPDKonmetal_AddRoute_Handler,
		},
		{
			MethodName: "deleteRoute",
			Handler:    _DPDKonmetal_DeleteRoute_Handler,
		},
		{
			MethodName: "listFirewallRules",
			Handler:    _DPDKonmetal_ListFirewallRules_Handler,
		},
		{
			MethodName: "addFirewallRule",
			Handler:    _DPDKonmetal_AddFirewallRule_Handler,
		},
		{
			MethodName: "deleteFirewallRule",
			Handler:    _DPDKonmetal_DeleteFirewallRule_Handler,
		},
		{
			MethodName: "QueryHelloWorld",
			Handler:    _DPDKonmetal_QueryHelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dpdk.proto",
}
