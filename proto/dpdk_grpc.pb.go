/*
 * Copyright (c) 2021 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/dpdk.proto

package dpdkproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DPDKonmetalClient is the client API for DPDKonmetal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DPDKonmetalClient interface {
	//// INITIALIZATION
	// initialized indicates if the DPDK app has been initialized already, if so an UUID is returned.
	// this UUID gets changed in case the dp-service gets restarted.
	Initialized(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UUIDMsg, error)
	// init will be called once for initial set up of the DPDK app.
	// init returns an error if the DPDK app has been initialized already. So check if it got initialized before calling init.
	Init(ctx context.Context, in *InitConfig, opts ...grpc.CallOption) (*Status, error)
	//// INTERFACES
	ListInterfaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InterfacesMsg, error)
	GetInterface(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*GetInterfaceResponse, error)
	// createInterface creates and configures a VF (hypervisor case) or PF (bare metal) for the new interface.
	// If the interface's VNet is not known to the DPDK app yet, the VNet and its routing table will be intialized.
	// After calling createInterface() the Client has to make sure that the routing table of the corresponding VNet is filled (use listRoutes and addRoute as required).
	CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*CreateInterfaceResponse, error)
	// deleteInterface removes all networking configuration of a interface from the DPDK app.
	// The VF will be released and can be reused for other VMs.
	// If the interface was the last interface of a VNet on this hypervisor, the VNet and its routes will be freed from the DPDK app.
	DeleteInterface(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*Status, error)
	// updateThrottlingConfig changes a interface's throttling configuration during runtime.
	UpdateThrottlingConfig(ctx context.Context, in *ThrottlingConfigMsg, opts ...grpc.CallOption) (*Status, error)
	// listInterfacePrefixes returns a list of prefixes, that will be routed to the interface by the DPDK app.
	// For example this could be a node's Kubernetes Pod CIDR.
	ListInterfacePrefixes(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*PrefixesMsg, error)
	AddInterfacePrefix(ctx context.Context, in *InterfacePrefixMsg, opts ...grpc.CallOption) (*IpAdditionResponse, error)
	DeleteInterfacePrefix(ctx context.Context, in *InterfacePrefixMsg, opts ...grpc.CallOption) (*Status, error)
	// NAT related, add/get/del Virtual IP for a given Interface
	AddInterfaceVIP(ctx context.Context, in *InterfaceVIPMsg, opts ...grpc.CallOption) (*IpAdditionResponse, error)
	GetInterfaceVIP(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*InterfaceVIPIP, error)
	DeleteInterfaceVIP(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*Status, error)
	// LB related, add/list/del backend IPs for a given LB IP
	AddLBVIP(ctx context.Context, in *LBMsg, opts ...grpc.CallOption) (*IpAdditionResponse, error)
	GetLBVIPBackends(ctx context.Context, in *LBQueryMsg, opts ...grpc.CallOption) (*LBBackendMsg, error)
	DelLBVIP(ctx context.Context, in *LBMsg, opts ...grpc.CallOption) (*Status, error)
	//// ROUTES
	ListRoutes(ctx context.Context, in *VNIMsg, opts ...grpc.CallOption) (*RoutesMsg, error)
	// addRoutes adds a new route to a VNet's routing table (identified by VNI).
	// If the DPDK application does not hold any interface in the specified VNet, an error will be returned.
	AddRoute(ctx context.Context, in *VNIRouteMsg, opts ...grpc.CallOption) (*Status, error)
	// deleteRoute removes a route from a VNet.
	// If the route does not exist, an error will be returned.
	DeleteRoute(ctx context.Context, in *VNIRouteMsg, opts ...grpc.CallOption) (*Status, error)
	//// FIREWALL
	ListFirewallRules(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*FirewallRulesMsg, error)
	AddFirewallRule(ctx context.Context, in *FirewallRuleMsg, opts ...grpc.CallOption) (*Status, error)
	DeleteFirewallRule(ctx context.Context, in *RuleIDMsg, opts ...grpc.CallOption) (*Status, error)
}

type dPDKonmetalClient struct {
	cc grpc.ClientConnInterface
}

func NewDPDKonmetalClient(cc grpc.ClientConnInterface) DPDKonmetalClient {
	return &dPDKonmetalClient{cc}
}

func (c *dPDKonmetalClient) Initialized(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UUIDMsg, error) {
	out := new(UUIDMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/initialized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) Init(ctx context.Context, in *InitConfig, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListInterfaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InterfacesMsg, error) {
	out := new(InterfacesMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/listInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetInterface(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*GetInterfaceResponse, error) {
	out := new(GetInterfaceResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/getInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) CreateInterface(ctx context.Context, in *CreateInterfaceRequest, opts ...grpc.CallOption) (*CreateInterfaceResponse, error) {
	out := new(CreateInterfaceResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/createInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteInterface(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/deleteInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) UpdateThrottlingConfig(ctx context.Context, in *ThrottlingConfigMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/updateThrottlingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListInterfacePrefixes(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*PrefixesMsg, error) {
	out := new(PrefixesMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/listInterfacePrefixes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddInterfacePrefix(ctx context.Context, in *InterfacePrefixMsg, opts ...grpc.CallOption) (*IpAdditionResponse, error) {
	out := new(IpAdditionResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addInterfacePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteInterfacePrefix(ctx context.Context, in *InterfacePrefixMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/deleteInterfacePrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddInterfaceVIP(ctx context.Context, in *InterfaceVIPMsg, opts ...grpc.CallOption) (*IpAdditionResponse, error) {
	out := new(IpAdditionResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addInterfaceVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetInterfaceVIP(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*InterfaceVIPIP, error) {
	out := new(InterfaceVIPIP)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/getInterfaceVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteInterfaceVIP(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/deleteInterfaceVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddLBVIP(ctx context.Context, in *LBMsg, opts ...grpc.CallOption) (*IpAdditionResponse, error) {
	out := new(IpAdditionResponse)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addLBVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) GetLBVIPBackends(ctx context.Context, in *LBQueryMsg, opts ...grpc.CallOption) (*LBBackendMsg, error) {
	out := new(LBBackendMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/getLBVIPBackends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DelLBVIP(ctx context.Context, in *LBMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/delLBVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListRoutes(ctx context.Context, in *VNIMsg, opts ...grpc.CallOption) (*RoutesMsg, error) {
	out := new(RoutesMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/listRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddRoute(ctx context.Context, in *VNIRouteMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteRoute(ctx context.Context, in *VNIRouteMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/deleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) ListFirewallRules(ctx context.Context, in *InterfaceIDMsg, opts ...grpc.CallOption) (*FirewallRulesMsg, error) {
	out := new(FirewallRulesMsg)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/listFirewallRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) AddFirewallRule(ctx context.Context, in *FirewallRuleMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/addFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPDKonmetalClient) DeleteFirewallRule(ctx context.Context, in *RuleIDMsg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/dpdkonmetal.DPDKonmetal/deleteFirewallRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DPDKonmetalServer is the server API for DPDKonmetal service.
// All implementations must embed UnimplementedDPDKonmetalServer
// for forward compatibility
type DPDKonmetalServer interface {
	//// INITIALIZATION
	// initialized indicates if the DPDK app has been initialized already, if so an UUID is returned.
	// this UUID gets changed in case the dp-service gets restarted.
	Initialized(context.Context, *Empty) (*UUIDMsg, error)
	// init will be called once for initial set up of the DPDK app.
	// init returns an error if the DPDK app has been initialized already. So check if it got initialized before calling init.
	Init(context.Context, *InitConfig) (*Status, error)
	//// INTERFACES
	ListInterfaces(context.Context, *Empty) (*InterfacesMsg, error)
	GetInterface(context.Context, *InterfaceIDMsg) (*GetInterfaceResponse, error)
	// createInterface creates and configures a VF (hypervisor case) or PF (bare metal) for the new interface.
	// If the interface's VNet is not known to the DPDK app yet, the VNet and its routing table will be intialized.
	// After calling createInterface() the Client has to make sure that the routing table of the corresponding VNet is filled (use listRoutes and addRoute as required).
	CreateInterface(context.Context, *CreateInterfaceRequest) (*CreateInterfaceResponse, error)
	// deleteInterface removes all networking configuration of a interface from the DPDK app.
	// The VF will be released and can be reused for other VMs.
	// If the interface was the last interface of a VNet on this hypervisor, the VNet and its routes will be freed from the DPDK app.
	DeleteInterface(context.Context, *InterfaceIDMsg) (*Status, error)
	// updateThrottlingConfig changes a interface's throttling configuration during runtime.
	UpdateThrottlingConfig(context.Context, *ThrottlingConfigMsg) (*Status, error)
	// listInterfacePrefixes returns a list of prefixes, that will be routed to the interface by the DPDK app.
	// For example this could be a node's Kubernetes Pod CIDR.
	ListInterfacePrefixes(context.Context, *InterfaceIDMsg) (*PrefixesMsg, error)
	AddInterfacePrefix(context.Context, *InterfacePrefixMsg) (*IpAdditionResponse, error)
	DeleteInterfacePrefix(context.Context, *InterfacePrefixMsg) (*Status, error)
	// NAT related, add/get/del Virtual IP for a given Interface
	AddInterfaceVIP(context.Context, *InterfaceVIPMsg) (*IpAdditionResponse, error)
	GetInterfaceVIP(context.Context, *InterfaceIDMsg) (*InterfaceVIPIP, error)
	DeleteInterfaceVIP(context.Context, *InterfaceIDMsg) (*Status, error)
	// LB related, add/list/del backend IPs for a given LB IP
	AddLBVIP(context.Context, *LBMsg) (*IpAdditionResponse, error)
	GetLBVIPBackends(context.Context, *LBQueryMsg) (*LBBackendMsg, error)
	DelLBVIP(context.Context, *LBMsg) (*Status, error)
	//// ROUTES
	ListRoutes(context.Context, *VNIMsg) (*RoutesMsg, error)
	// addRoutes adds a new route to a VNet's routing table (identified by VNI).
	// If the DPDK application does not hold any interface in the specified VNet, an error will be returned.
	AddRoute(context.Context, *VNIRouteMsg) (*Status, error)
	// deleteRoute removes a route from a VNet.
	// If the route does not exist, an error will be returned.
	DeleteRoute(context.Context, *VNIRouteMsg) (*Status, error)
	//// FIREWALL
	ListFirewallRules(context.Context, *InterfaceIDMsg) (*FirewallRulesMsg, error)
	AddFirewallRule(context.Context, *FirewallRuleMsg) (*Status, error)
	DeleteFirewallRule(context.Context, *RuleIDMsg) (*Status, error)
	mustEmbedUnimplementedDPDKonmetalServer()
}

// UnimplementedDPDKonmetalServer must be embedded to have forward compatible implementations.
type UnimplementedDPDKonmetalServer struct {
}

func (UnimplementedDPDKonmetalServer) Initialized(context.Context, *Empty) (*UUIDMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialized not implemented")
}
func (UnimplementedDPDKonmetalServer) Init(context.Context, *InitConfig) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedDPDKonmetalServer) ListInterfaces(context.Context, *Empty) (*InterfacesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (UnimplementedDPDKonmetalServer) GetInterface(context.Context, *InterfaceIDMsg) (*GetInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterface not implemented")
}
func (UnimplementedDPDKonmetalServer) CreateInterface(context.Context, *CreateInterfaceRequest) (*CreateInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterface not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteInterface(context.Context, *InterfaceIDMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (UnimplementedDPDKonmetalServer) UpdateThrottlingConfig(context.Context, *ThrottlingConfigMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThrottlingConfig not implemented")
}
func (UnimplementedDPDKonmetalServer) ListInterfacePrefixes(context.Context, *InterfaceIDMsg) (*PrefixesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfacePrefixes not implemented")
}
func (UnimplementedDPDKonmetalServer) AddInterfacePrefix(context.Context, *InterfacePrefixMsg) (*IpAdditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterfacePrefix not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteInterfacePrefix(context.Context, *InterfacePrefixMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterfacePrefix not implemented")
}
func (UnimplementedDPDKonmetalServer) AddInterfaceVIP(context.Context, *InterfaceVIPMsg) (*IpAdditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterfaceVIP not implemented")
}
func (UnimplementedDPDKonmetalServer) GetInterfaceVIP(context.Context, *InterfaceIDMsg) (*InterfaceVIPIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterfaceVIP not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteInterfaceVIP(context.Context, *InterfaceIDMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterfaceVIP not implemented")
}
func (UnimplementedDPDKonmetalServer) AddLBVIP(context.Context, *LBMsg) (*IpAdditionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLBVIP not implemented")
}
func (UnimplementedDPDKonmetalServer) GetLBVIPBackends(context.Context, *LBQueryMsg) (*LBBackendMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLBVIPBackends not implemented")
}
func (UnimplementedDPDKonmetalServer) DelLBVIP(context.Context, *LBMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLBVIP not implemented")
}
func (UnimplementedDPDKonmetalServer) ListRoutes(context.Context, *VNIMsg) (*RoutesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedDPDKonmetalServer) AddRoute(context.Context, *VNIRouteMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteRoute(context.Context, *VNIRouteMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedDPDKonmetalServer) ListFirewallRules(context.Context, *InterfaceIDMsg) (*FirewallRulesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFirewallRules not implemented")
}
func (UnimplementedDPDKonmetalServer) AddFirewallRule(context.Context, *FirewallRuleMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFirewallRule not implemented")
}
func (UnimplementedDPDKonmetalServer) DeleteFirewallRule(context.Context, *RuleIDMsg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirewallRule not implemented")
}
func (UnimplementedDPDKonmetalServer) mustEmbedUnimplementedDPDKonmetalServer() {}

// UnsafeDPDKonmetalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DPDKonmetalServer will
// result in compilation errors.
type UnsafeDPDKonmetalServer interface {
	mustEmbedUnimplementedDPDKonmetalServer()
}

func RegisterDPDKonmetalServer(s grpc.ServiceRegistrar, srv DPDKonmetalServer) {
	s.RegisterService(&DPDKonmetal_ServiceDesc, srv)
}

func _DPDKonmetal_Initialized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).Initialized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/initialized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).Initialized(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).Init(ctx, req.(*InitConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/listInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListInterfaces(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/getInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetInterface(ctx, req.(*InterfaceIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_CreateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).CreateInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/createInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).CreateInterface(ctx, req.(*CreateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/deleteInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteInterface(ctx, req.(*InterfaceIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_UpdateThrottlingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThrottlingConfigMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).UpdateThrottlingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/updateThrottlingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).UpdateThrottlingConfig(ctx, req.(*ThrottlingConfigMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListInterfacePrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListInterfacePrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/listInterfacePrefixes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListInterfacePrefixes(ctx, req.(*InterfaceIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddInterfacePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfacePrefixMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddInterfacePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addInterfacePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddInterfacePrefix(ctx, req.(*InterfacePrefixMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteInterfacePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfacePrefixMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteInterfacePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/deleteInterfacePrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteInterfacePrefix(ctx, req.(*InterfacePrefixMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddInterfaceVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceVIPMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddInterfaceVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addInterfaceVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddInterfaceVIP(ctx, req.(*InterfaceVIPMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetInterfaceVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetInterfaceVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/getInterfaceVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetInterfaceVIP(ctx, req.(*InterfaceIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteInterfaceVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteInterfaceVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/deleteInterfaceVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteInterfaceVIP(ctx, req.(*InterfaceIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddLBVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddLBVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addLBVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddLBVIP(ctx, req.(*LBMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_GetLBVIPBackends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBQueryMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).GetLBVIPBackends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/getLBVIPBackends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).GetLBVIPBackends(ctx, req.(*LBQueryMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DelLBVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DelLBVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/delLBVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DelLBVIP(ctx, req.(*LBMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNIMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/listRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListRoutes(ctx, req.(*VNIMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNIRouteMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddRoute(ctx, req.(*VNIRouteMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VNIRouteMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/deleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteRoute(ctx, req.(*VNIRouteMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_ListFirewallRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).ListFirewallRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/listFirewallRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).ListFirewallRules(ctx, req.(*InterfaceIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_AddFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirewallRuleMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).AddFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/addFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).AddFirewallRule(ctx, req.(*FirewallRuleMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPDKonmetal_DeleteFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPDKonmetalServer).DeleteFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dpdkonmetal.DPDKonmetal/deleteFirewallRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPDKonmetalServer).DeleteFirewallRule(ctx, req.(*RuleIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// DPDKonmetal_ServiceDesc is the grpc.ServiceDesc for DPDKonmetal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DPDKonmetal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dpdkonmetal.DPDKonmetal",
	HandlerType: (*DPDKonmetalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initialized",
			Handler:    _DPDKonmetal_Initialized_Handler,
		},
		{
			MethodName: "init",
			Handler:    _DPDKonmetal_Init_Handler,
		},
		{
			MethodName: "listInterfaces",
			Handler:    _DPDKonmetal_ListInterfaces_Handler,
		},
		{
			MethodName: "getInterface",
			Handler:    _DPDKonmetal_GetInterface_Handler,
		},
		{
			MethodName: "createInterface",
			Handler:    _DPDKonmetal_CreateInterface_Handler,
		},
		{
			MethodName: "deleteInterface",
			Handler:    _DPDKonmetal_DeleteInterface_Handler,
		},
		{
			MethodName: "updateThrottlingConfig",
			Handler:    _DPDKonmetal_UpdateThrottlingConfig_Handler,
		},
		{
			MethodName: "listInterfacePrefixes",
			Handler:    _DPDKonmetal_ListInterfacePrefixes_Handler,
		},
		{
			MethodName: "addInterfacePrefix",
			Handler:    _DPDKonmetal_AddInterfacePrefix_Handler,
		},
		{
			MethodName: "deleteInterfacePrefix",
			Handler:    _DPDKonmetal_DeleteInterfacePrefix_Handler,
		},
		{
			MethodName: "addInterfaceVIP",
			Handler:    _DPDKonmetal_AddInterfaceVIP_Handler,
		},
		{
			MethodName: "getInterfaceVIP",
			Handler:    _DPDKonmetal_GetInterfaceVIP_Handler,
		},
		{
			MethodName: "deleteInterfaceVIP",
			Handler:    _DPDKonmetal_DeleteInterfaceVIP_Handler,
		},
		{
			MethodName: "addLBVIP",
			Handler:    _DPDKonmetal_AddLBVIP_Handler,
		},
		{
			MethodName: "getLBVIPBackends",
			Handler:    _DPDKonmetal_GetLBVIPBackends_Handler,
		},
		{
			MethodName: "delLBVIP",
			Handler:    _DPDKonmetal_DelLBVIP_Handler,
		},
		{
			MethodName: "listRoutes",
			Handler:    _DPDKonmetal_ListRoutes_Handler,
		},
		{
			MethodName: "addRoute",
			Handler:    _DPDKonmetal_AddRoute_Handler,
		},
		{
			MethodName: "deleteRoute",
			Handler:    _DPDKonmetal_DeleteRoute_Handler,
		},
		{
			MethodName: "listFirewallRules",
			Handler:    _DPDKonmetal_ListFirewallRules_Handler,
		},
		{
			MethodName: "addFirewallRule",
			Handler:    _DPDKonmetal_AddFirewallRule_Handler,
		},
		{
			MethodName: "deleteFirewallRule",
			Handler:    _DPDKonmetal_DeleteFirewallRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dpdk.proto",
}
