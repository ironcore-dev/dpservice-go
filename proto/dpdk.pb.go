/*
 * Copyright (c) 2021 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: proto/dpdk.proto

package dpdkproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InterfaceType int32

const (
	InterfaceType_VirtualInterface   InterfaceType = 0
	InterfaceType_BareMetalInterface InterfaceType = 1
)

// Enum value maps for InterfaceType.
var (
	InterfaceType_name = map[int32]string{
		0: "VirtualInterface",
		1: "BareMetalInterface",
	}
	InterfaceType_value = map[string]int32{
		"VirtualInterface":   0,
		"BareMetalInterface": 1,
	}
)

func (x InterfaceType) Enum() *InterfaceType {
	p := new(InterfaceType)
	*p = x
	return p
}

func (x InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[0].Descriptor()
}

func (InterfaceType) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[0]
}

func (x InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceType.Descriptor instead.
func (InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{0}
}

type IPVersion int32

const (
	IPVersion_IPv4 IPVersion = 0
	IPVersion_IPv6 IPVersion = 1
)

// Enum value maps for IPVersion.
var (
	IPVersion_name = map[int32]string{
		0: "IPv4",
		1: "IPv6",
	}
	IPVersion_value = map[string]int32{
		"IPv4": 0,
		"IPv6": 1,
	}
)

func (x IPVersion) Enum() *IPVersion {
	p := new(IPVersion)
	*p = x
	return p
}

func (x IPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[1].Descriptor()
}

func (IPVersion) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[1]
}

func (x IPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPVersion.Descriptor instead.
func (IPVersion) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{1}
}

type Protocol int32

const (
	Protocol_Undefined Protocol = 0 // "Undefined" will set up a layer 3 firewall rule and does not filter on layer 4 protocol details.
	Protocol_ICMP      Protocol = 1
	Protocol_TCP       Protocol = 6
	Protocol_UDP       Protocol = 17
	Protocol_ICMPv6    Protocol = 58
	Protocol_SCTP      Protocol = 132
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0:   "Undefined",
		1:   "ICMP",
		6:   "TCP",
		17:  "UDP",
		58:  "ICMPv6",
		132: "SCTP",
	}
	Protocol_value = map[string]int32{
		"Undefined": 0,
		"ICMP":      1,
		"TCP":       6,
		"UDP":       17,
		"ICMPv6":    58,
		"SCTP":      132,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[2].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[2]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{2}
}

type TrafficDirection int32

const (
	TrafficDirection_Ingress TrafficDirection = 0
	TrafficDirection_Egress  TrafficDirection = 1
)

// Enum value maps for TrafficDirection.
var (
	TrafficDirection_name = map[int32]string{
		0: "Ingress",
		1: "Egress",
	}
	TrafficDirection_value = map[string]int32{
		"Ingress": 0,
		"Egress":  1,
	}
)

func (x TrafficDirection) Enum() *TrafficDirection {
	p := new(TrafficDirection)
	*p = x
	return p
}

func (x TrafficDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[3].Descriptor()
}

func (TrafficDirection) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[3]
}

func (x TrafficDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficDirection.Descriptor instead.
func (TrafficDirection) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{3}
}

type FirewallAction int32

const (
	FirewallAction_Drop   FirewallAction = 0
	FirewallAction_Accept FirewallAction = 1
)

// Enum value maps for FirewallAction.
var (
	FirewallAction_name = map[int32]string{
		0: "Drop",
		1: "Accept",
	}
	FirewallAction_value = map[string]int32{
		"Drop":   0,
		"Accept": 1,
	}
)

func (x FirewallAction) Enum() *FirewallAction {
	p := new(FirewallAction)
	*p = x
	return p
}

func (x FirewallAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirewallAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[4].Descriptor()
}

func (FirewallAction) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[4]
}

func (x FirewallAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirewallAction.Descriptor instead.
func (FirewallAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{4}
}

type NATInfoType int32

const (
	NATInfoType_NATInfoTypeZero NATInfoType = 0
	NATInfoType_NATInfoLocal    NATInfoType = 1
	NATInfoType_NATInfoNeigh    NATInfoType = 2
)

// Enum value maps for NATInfoType.
var (
	NATInfoType_name = map[int32]string{
		0: "NATInfoTypeZero",
		1: "NATInfoLocal",
		2: "NATInfoNeigh",
	}
	NATInfoType_value = map[string]int32{
		"NATInfoTypeZero": 0,
		"NATInfoLocal":    1,
		"NATInfoNeigh":    2,
	}
)

func (x NATInfoType) Enum() *NATInfoType {
	p := new(NATInfoType)
	*p = x
	return p
}

func (x NATInfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NATInfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[5].Descriptor()
}

func (NATInfoType) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[5]
}

func (x NATInfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NATInfoType.Descriptor instead.
func (NATInfoType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{5}
}

type VniType int32

const (
	VniType_VniIpv4        VniType = 0
	VniType_VniIpv6        VniType = 1
	VniType_VniIpv4AndIpv6 VniType = 2
)

// Enum value maps for VniType.
var (
	VniType_name = map[int32]string{
		0: "VniIpv4",
		1: "VniIpv6",
		2: "VniIpv4AndIpv6",
	}
	VniType_value = map[string]int32{
		"VniIpv4":        0,
		"VniIpv6":        1,
		"VniIpv4AndIpv6": 2,
	}
)

func (x VniType) Enum() *VniType {
	p := new(VniType)
	*p = x
	return p
}

func (x VniType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VniType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[6].Descriptor()
}

func (VniType) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[6]
}

func (x VniType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VniType.Descriptor instead.
func (VniType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{6}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateInterfaceLoadBalancerPrefixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,2,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *CreateInterfaceLoadBalancerPrefixResponse) Reset() {
	*x = CreateInterfaceLoadBalancerPrefixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceLoadBalancerPrefixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceLoadBalancerPrefixResponse) ProtoMessage() {}

func (x *CreateInterfaceLoadBalancerPrefixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceLoadBalancerPrefixResponse.ProtoReflect.Descriptor instead.
func (*CreateInterfaceLoadBalancerPrefixResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{1}
}

func (x *CreateInterfaceLoadBalancerPrefixResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateInterfaceLoadBalancerPrefixResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type IpAdditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,2,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *IpAdditionResponse) Reset() {
	*x = IpAdditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAdditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAdditionResponse) ProtoMessage() {}

func (x *IpAdditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAdditionResponse.ProtoReflect.Descriptor instead.
func (*IpAdditionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{2}
}

func (x *IpAdditionResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IpAdditionResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type AddNATResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,2,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *AddNATResponse) Reset() {
	*x = AddNATResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNATResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNATResponse) ProtoMessage() {}

func (x *AddNATResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNATResponse.ProtoReflect.Descriptor instead.
func (*AddNATResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{3}
}

func (x *AddNATResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddNATResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type GetNATResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NatVIPIP      *NATIP  `protobuf:"bytes,2,opt,name=natVIPIP,proto3" json:"natVIPIP,omitempty"`
	MinPort       uint32  `protobuf:"varint,3,opt,name=minPort,proto3" json:"minPort,omitempty"` // port should be uint16 (less than 65536)
	MaxPort       uint32  `protobuf:"varint,4,opt,name=maxPort,proto3" json:"maxPort,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,5,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *GetNATResponse) Reset() {
	*x = GetNATResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNATResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNATResponse) ProtoMessage() {}

func (x *GetNATResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNATResponse.ProtoReflect.Descriptor instead.
func (*GetNATResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{4}
}

func (x *GetNATResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetNATResponse) GetNatVIPIP() *NATIP {
	if x != nil {
		return x.NatVIPIP
	}
	return nil
}

func (x *GetNATResponse) GetMinPort() uint32 {
	if x != nil {
		return x.MinPort
	}
	return 0
}

func (x *GetNATResponse) GetMaxPort() uint32 {
	if x != nil {
		return x.MaxPort
	}
	return 0
}

func (x *GetNATResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type CreateLoadBalancerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,2,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *CreateLoadBalancerResponse) Reset() {
	*x = CreateLoadBalancerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoadBalancerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoadBalancerResponse) ProtoMessage() {}

func (x *CreateLoadBalancerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoadBalancerResponse.ProtoReflect.Descriptor instead.
func (*CreateLoadBalancerResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{5}
}

func (x *CreateLoadBalancerResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CreateLoadBalancerResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{6}
}

type Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion     IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Address       []byte    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`            // can hold 4 bytes (IPv4) or 16 bytes (IPv6)
	PrefixLength  uint32    `protobuf:"varint,3,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"` // max length is 32 for IPv4 and 128 for IPv6
	UnderlayRoute []byte    `protobuf:"bytes,4,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *Prefix) Reset() {
	*x = Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prefix) ProtoMessage() {}

func (x *Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prefix.ProtoReflect.Descriptor instead.
func (*Prefix) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{7}
}

func (x *Prefix) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *Prefix) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Prefix) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *Prefix) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type LBPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion     IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Address       []byte    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`            // can hold 4 bytes (IPv4) or 16 bytes (IPv6)
	PrefixLength  uint32    `protobuf:"varint,3,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"` // max length is 32 for IPv4 and 128 for IPv6
	UnderlayRoute []byte    `protobuf:"bytes,4,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *LBPrefix) Reset() {
	*x = LBPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LBPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBPrefix) ProtoMessage() {}

func (x *LBPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBPrefix.ProtoReflect.Descriptor instead.
func (*LBPrefix) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{8}
}

func (x *LBPrefix) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *LBPrefix) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *LBPrefix) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *LBPrefix) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type InitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnderlayIPv6Prefix *Prefix  `protobuf:"bytes,1,opt,name=underlayIPv6Prefix,proto3" json:"underlayIPv6Prefix,omitempty"` // prefix in the underlay network that is routed to the DPDK app
	UplinkPorts        []string `protobuf:"bytes,2,rep,name=uplinkPorts,proto3" json:"uplinkPorts,omitempty"`               // Linux name of the NICs that are connected to the Leaf Switches
	PfNames            []string `protobuf:"bytes,3,rep,name=pfNames,proto3" json:"pfNames,omitempty"`                       // Linux name of the Physical Functions, that Virtual Functions will be derived from
}

func (x *InitConfig) Reset() {
	*x = InitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitConfig) ProtoMessage() {}

func (x *InitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitConfig.ProtoReflect.Descriptor instead.
func (*InitConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{9}
}

func (x *InitConfig) GetUnderlayIPv6Prefix() *Prefix {
	if x != nil {
		return x.UnderlayIPv6Prefix
	}
	return nil
}

func (x *InitConfig) GetUplinkPorts() []string {
	if x != nil {
		return x.UplinkPorts
	}
	return nil
}

func (x *InitConfig) GetPfNames() []string {
	if x != nil {
		return x.PfNames
	}
	return nil
}

type PXEConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextServer   string `protobuf:"bytes,1,opt,name=nextServer,proto3" json:"nextServer,omitempty"`
	BootFileName string `protobuf:"bytes,2,opt,name=bootFileName,proto3" json:"bootFileName,omitempty"`
}

func (x *PXEConfig) Reset() {
	*x = PXEConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXEConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXEConfig) ProtoMessage() {}

func (x *PXEConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXEConfig.ProtoReflect.Descriptor instead.
func (*PXEConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{10}
}

func (x *PXEConfig) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *PXEConfig) GetBootFileName() string {
	if x != nil {
		return x.BootFileName
	}
	return ""
}

type ProtocolFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*ProtocolFilter_Icmp
	//	*ProtocolFilter_Tcp
	//	*ProtocolFilter_Udp
	Filter isProtocolFilter_Filter `protobuf_oneof:"filter"`
}

func (x *ProtocolFilter) Reset() {
	*x = ProtocolFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolFilter) ProtoMessage() {}

func (x *ProtocolFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolFilter.ProtoReflect.Descriptor instead.
func (*ProtocolFilter) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{11}
}

func (m *ProtocolFilter) GetFilter() isProtocolFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *ProtocolFilter) GetIcmp() *ICMPFilter {
	if x, ok := x.GetFilter().(*ProtocolFilter_Icmp); ok {
		return x.Icmp
	}
	return nil
}

func (x *ProtocolFilter) GetTcp() *TCPFilter {
	if x, ok := x.GetFilter().(*ProtocolFilter_Tcp); ok {
		return x.Tcp
	}
	return nil
}

func (x *ProtocolFilter) GetUdp() *UDPFilter {
	if x, ok := x.GetFilter().(*ProtocolFilter_Udp); ok {
		return x.Udp
	}
	return nil
}

type isProtocolFilter_Filter interface {
	isProtocolFilter_Filter()
}

type ProtocolFilter_Icmp struct {
	Icmp *ICMPFilter `protobuf:"bytes,1,opt,name=icmp,proto3,oneof"`
}

type ProtocolFilter_Tcp struct {
	Tcp *TCPFilter `protobuf:"bytes,2,opt,name=tcp,proto3,oneof"`
}

type ProtocolFilter_Udp struct {
	Udp *UDPFilter `protobuf:"bytes,3,opt,name=udp,proto3,oneof"`
}

func (*ProtocolFilter_Icmp) isProtocolFilter_Filter() {}

func (*ProtocolFilter_Tcp) isProtocolFilter_Filter() {}

func (*ProtocolFilter_Udp) isProtocolFilter_Filter() {}

type ICMPFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IcmpType int32 `protobuf:"varint,1,opt,name=icmpType,proto3" json:"icmpType,omitempty"` // -1 matches all ICMP Codes
	IcmpCode int32 `protobuf:"varint,2,opt,name=icmpCode,proto3" json:"icmpCode,omitempty"` // -1 matches all ICMP Types
}

func (x *ICMPFilter) Reset() {
	*x = ICMPFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICMPFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICMPFilter) ProtoMessage() {}

func (x *ICMPFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICMPFilter.ProtoReflect.Descriptor instead.
func (*ICMPFilter) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{12}
}

func (x *ICMPFilter) GetIcmpType() int32 {
	if x != nil {
		return x.IcmpType
	}
	return 0
}

func (x *ICMPFilter) GetIcmpCode() int32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

type TCPFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPortLower int32 `protobuf:"varint,1,opt,name=srcPortLower,proto3" json:"srcPortLower,omitempty"` // -1 matches all source ports
	SrcPortUpper int32 `protobuf:"varint,2,opt,name=srcPortUpper,proto3" json:"srcPortUpper,omitempty"`
	DstPortLower int32 `protobuf:"varint,3,opt,name=dstPortLower,proto3" json:"dstPortLower,omitempty"` // -1 matches all destination ports
	DstPortUpper int32 `protobuf:"varint,4,opt,name=dstPortUpper,proto3" json:"dstPortUpper,omitempty"`
}

func (x *TCPFilter) Reset() {
	*x = TCPFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPFilter) ProtoMessage() {}

func (x *TCPFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPFilter.ProtoReflect.Descriptor instead.
func (*TCPFilter) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{13}
}

func (x *TCPFilter) GetSrcPortLower() int32 {
	if x != nil {
		return x.SrcPortLower
	}
	return 0
}

func (x *TCPFilter) GetSrcPortUpper() int32 {
	if x != nil {
		return x.SrcPortUpper
	}
	return 0
}

func (x *TCPFilter) GetDstPortLower() int32 {
	if x != nil {
		return x.DstPortLower
	}
	return 0
}

func (x *TCPFilter) GetDstPortUpper() int32 {
	if x != nil {
		return x.DstPortUpper
	}
	return 0
}

type UDPFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPortLower int32 `protobuf:"varint,1,opt,name=srcPortLower,proto3" json:"srcPortLower,omitempty"` // -1 matches all source ports
	SrcPortUpper int32 `protobuf:"varint,2,opt,name=srcPortUpper,proto3" json:"srcPortUpper,omitempty"`
	DstPortLower int32 `protobuf:"varint,3,opt,name=dstPortLower,proto3" json:"dstPortLower,omitempty"` // -1 matches all destination ports
	DstPortUpper int32 `protobuf:"varint,4,opt,name=dstPortUpper,proto3" json:"dstPortUpper,omitempty"`
}

func (x *UDPFilter) Reset() {
	*x = UDPFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDPFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDPFilter) ProtoMessage() {}

func (x *UDPFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDPFilter.ProtoReflect.Descriptor instead.
func (*UDPFilter) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{14}
}

func (x *UDPFilter) GetSrcPortLower() int32 {
	if x != nil {
		return x.SrcPortLower
	}
	return 0
}

func (x *UDPFilter) GetSrcPortUpper() int32 {
	if x != nil {
		return x.SrcPortUpper
	}
	return 0
}

func (x *UDPFilter) GetDstPortLower() int32 {
	if x != nil {
		return x.DstPortLower
	}
	return 0
}

func (x *UDPFilter) GetDstPortUpper() int32 {
	if x != nil {
		return x.DstPortUpper
	}
	return 0
}

// Firewall Rules can be inserted and removed while the interface is running. Linked list is used despite O(n) nature, as the list
// needs to be traversed only once for each packet. (Stateful Firewall and each pass after that is O(1))
// Firewall rules have a priority. "0" being the highest and "65536" being the lowest. Default is "1000".
// Current implementation supports only "allow" rules. The priority doesnt have any influence when we have only "allow" rules.
// Without any installed rule, egress default is "allow" everything and ingress default is "deny" everything. With first installed
// egress rule, egress default changes to "deny" everything except the installed rule(s).
// When a packet matches a firewall rule, the defined action is taken. No further firewall rules will be evaluated thereafter.
type FirewallRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleID            []byte           `protobuf:"bytes,1,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
	Direction         TrafficDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=dpdkonmetal.TrafficDirection" json:"direction,omitempty"`
	Action            FirewallAction   `protobuf:"varint,3,opt,name=action,proto3,enum=dpdkonmetal.FirewallAction" json:"action,omitempty"` // Can be only "accept" at the moment.
	Priority          uint32           `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`                             // For future use. No effect at the moment.
	IpVersion         IPVersion        `protobuf:"varint,5,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	SourcePrefix      *Prefix          `protobuf:"bytes,6,opt,name=sourcePrefix,proto3" json:"sourcePrefix,omitempty"`           // 0.0.0.0 with prefix length 0 matches all source ips
	DestinationPrefix *Prefix          `protobuf:"bytes,7,opt,name=destinationPrefix,proto3" json:"destinationPrefix,omitempty"` // 0.0.0.0 with prefix length 0 matches all destination ips
	ProtocolFilter    *ProtocolFilter  `protobuf:"bytes,8,opt,name=protocolFilter,proto3" json:"protocolFilter,omitempty"`       // Not defining a protocol filter matches all protocols
}

func (x *FirewallRule) Reset() {
	*x = FirewallRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRule) ProtoMessage() {}

func (x *FirewallRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRule.ProtoReflect.Descriptor instead.
func (*FirewallRule) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{15}
}

func (x *FirewallRule) GetRuleID() []byte {
	if x != nil {
		return x.RuleID
	}
	return nil
}

func (x *FirewallRule) GetDirection() TrafficDirection {
	if x != nil {
		return x.Direction
	}
	return TrafficDirection_Ingress
}

func (x *FirewallRule) GetAction() FirewallAction {
	if x != nil {
		return x.Action
	}
	return FirewallAction_Drop
}

func (x *FirewallRule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *FirewallRule) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *FirewallRule) GetSourcePrefix() *Prefix {
	if x != nil {
		return x.SourcePrefix
	}
	return nil
}

func (x *FirewallRule) GetDestinationPrefix() *Prefix {
	if x != nil {
		return x.DestinationPrefix
	}
	return nil
}

func (x *FirewallRule) GetProtocolFilter() *ProtocolFilter {
	if x != nil {
		return x.ProtocolFilter
	}
	return nil
}

type IPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	// DHCP Options
	PrimaryAddress    []byte          `protobuf:"bytes,2,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	Mtu               uint32          `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	DhcpHostname      string          `protobuf:"bytes,4,opt,name=dhcpHostname,proto3" json:"dhcpHostname,omitempty"`
	DhcpDomainname    string          `protobuf:"bytes,5,opt,name=dhcpDomainname,proto3" json:"dhcpDomainname,omitempty"`
	PxeConfig         *PXEConfig      `protobuf:"bytes,6,opt,name=pxeConfig,proto3" json:"pxeConfig,omitempty"`
	Ntp               []string        `protobuf:"bytes,7,rep,name=ntp,proto3" json:"ntp,omitempty"`
	Dns               [][]byte        `protobuf:"bytes,8,rep,name=dns,proto3" json:"dns,omitempty"`
	FirewallRules     []*FirewallRule `protobuf:"bytes,9,rep,name=firewallRules,proto3" json:"firewallRules,omitempty"`
	InterfacePrefixes []*Prefix       `protobuf:"bytes,10,rep,name=interfacePrefixes,proto3" json:"interfacePrefixes,omitempty"`
}

func (x *IPConfig) Reset() {
	*x = IPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPConfig) ProtoMessage() {}

func (x *IPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPConfig.ProtoReflect.Descriptor instead.
func (*IPConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{16}
}

func (x *IPConfig) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *IPConfig) GetPrimaryAddress() []byte {
	if x != nil {
		return x.PrimaryAddress
	}
	return nil
}

func (x *IPConfig) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *IPConfig) GetDhcpHostname() string {
	if x != nil {
		return x.DhcpHostname
	}
	return ""
}

func (x *IPConfig) GetDhcpDomainname() string {
	if x != nil {
		return x.DhcpDomainname
	}
	return ""
}

func (x *IPConfig) GetPxeConfig() *PXEConfig {
	if x != nil {
		return x.PxeConfig
	}
	return nil
}

func (x *IPConfig) GetNtp() []string {
	if x != nil {
		return x.Ntp
	}
	return nil
}

func (x *IPConfig) GetDns() [][]byte {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *IPConfig) GetFirewallRules() []*FirewallRule {
	if x != nil {
		return x.FirewallRules
	}
	return nil
}

func (x *IPConfig) GetInterfacePrefixes() []*Prefix {
	if x != nil {
		return x.InterfacePrefixes
	}
	return nil
}

type ThrottlingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngressPacketsPerSecond  uint32 `protobuf:"varint,1,opt,name=ingressPacketsPerSecond,proto3" json:"ingressPacketsPerSecond,omitempty"`
	IngressMegabitsPerSecond uint32 `protobuf:"varint,2,opt,name=ingressMegabitsPerSecond,proto3" json:"ingressMegabitsPerSecond,omitempty"`
	EgressPacketsPerSecond   uint32 `protobuf:"varint,3,opt,name=egressPacketsPerSecond,proto3" json:"egressPacketsPerSecond,omitempty"`
	EgressMegabitsPerSecond  uint32 `protobuf:"varint,4,opt,name=egressMegabitsPerSecond,proto3" json:"egressMegabitsPerSecond,omitempty"`
	MaxOpenFlows             uint32 `protobuf:"varint,5,opt,name=maxOpenFlows,proto3" json:"maxOpenFlows,omitempty"`
}

func (x *ThrottlingConfig) Reset() {
	*x = ThrottlingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrottlingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottlingConfig) ProtoMessage() {}

func (x *ThrottlingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottlingConfig.ProtoReflect.Descriptor instead.
func (*ThrottlingConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{17}
}

func (x *ThrottlingConfig) GetIngressPacketsPerSecond() uint32 {
	if x != nil {
		return x.IngressPacketsPerSecond
	}
	return 0
}

func (x *ThrottlingConfig) GetIngressMegabitsPerSecond() uint32 {
	if x != nil {
		return x.IngressMegabitsPerSecond
	}
	return 0
}

func (x *ThrottlingConfig) GetEgressPacketsPerSecond() uint32 {
	if x != nil {
		return x.EgressPacketsPerSecond
	}
	return 0
}

func (x *ThrottlingConfig) GetEgressMegabitsPerSecond() uint32 {
	if x != nil {
		return x.EgressMegabitsPerSecond
	}
	return 0
}

func (x *ThrottlingConfig) GetMaxOpenFlows() uint32 {
	if x != nil {
		return x.MaxOpenFlows
	}
	return 0
}

type CreateInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interfaceType defines whether a Bare Metal Interface or a Virtual Interface is created.
	// Both instance types cannot be mixed during a session.
	// Maximum number of instantiated bare metal interfaces is 1.
	// Maximum number of Virtual Interfaces is not defined.
	// If you specify device name, a device with this name will be assigned, if it exists
	// otherwise an error code. If you dont specify any device name, next available VF
	// will be assigned.
	InterfaceType    InterfaceType     `protobuf:"varint,1,opt,name=interfaceType,proto3,enum=dpdkonmetal.InterfaceType" json:"interfaceType,omitempty"`
	InterfaceID      []byte            `protobuf:"bytes,2,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	Vni              uint32            `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	Ipv4Config       *IPConfig         `protobuf:"bytes,4,opt,name=ipv4Config,proto3" json:"ipv4Config,omitempty"`
	Ipv6Config       *IPConfig         `protobuf:"bytes,5,opt,name=ipv6Config,proto3" json:"ipv6Config,omitempty"`
	DeviceName       string            `protobuf:"bytes,6,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ThrottlingConfig *ThrottlingConfig `protobuf:"bytes,7,opt,name=throttlingConfig,proto3" json:"throttlingConfig,omitempty"`
}

func (x *CreateInterfaceRequest) Reset() {
	*x = CreateInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceRequest) ProtoMessage() {}

func (x *CreateInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceRequest.ProtoReflect.Descriptor instead.
func (*CreateInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{18}
}

func (x *CreateInterfaceRequest) GetInterfaceType() InterfaceType {
	if x != nil {
		return x.InterfaceType
	}
	return InterfaceType_VirtualInterface
}

func (x *CreateInterfaceRequest) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *CreateInterfaceRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *CreateInterfaceRequest) GetIpv4Config() *IPConfig {
	if x != nil {
		return x.Ipv4Config
	}
	return nil
}

func (x *CreateInterfaceRequest) GetIpv6Config() *IPConfig {
	if x != nil {
		return x.Ipv6Config
	}
	return nil
}

func (x *CreateInterfaceRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *CreateInterfaceRequest) GetThrottlingConfig() *ThrottlingConfig {
	if x != nil {
		return x.ThrottlingConfig
	}
	return nil
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID        []byte            `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	Vni                uint32            `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	PrimaryIPv4Address []byte            `protobuf:"bytes,3,opt,name=primaryIPv4Address,proto3" json:"primaryIPv4Address,omitempty"`
	PrimaryIPv6Address []byte            `protobuf:"bytes,4,opt,name=primaryIPv6Address,proto3" json:"primaryIPv6Address,omitempty"`
	ThrottlingConfig   *ThrottlingConfig `protobuf:"bytes,5,opt,name=throttlingConfig,proto3" json:"throttlingConfig,omitempty"`
	UnderlayRoute      []byte            `protobuf:"bytes,6,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
	PciDpName          string            `protobuf:"bytes,7,opt,name=pciDpName,proto3" json:"pciDpName,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{19}
}

func (x *Interface) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *Interface) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *Interface) GetPrimaryIPv4Address() []byte {
	if x != nil {
		return x.PrimaryIPv4Address
	}
	return nil
}

func (x *Interface) GetPrimaryIPv6Address() []byte {
	if x != nil {
		return x.PrimaryIPv6Address
	}
	return nil
}

func (x *Interface) GetThrottlingConfig() *ThrottlingConfig {
	if x != nil {
		return x.ThrottlingConfig
	}
	return nil
}

func (x *Interface) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

func (x *Interface) GetPciDpName() string {
	if x != nil {
		return x.PciDpName
	}
	return ""
}

type InterfaceIDMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
}

func (x *InterfaceIDMsg) Reset() {
	*x = InterfaceIDMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceIDMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceIDMsg) ProtoMessage() {}

func (x *InterfaceIDMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceIDMsg.ProtoReflect.Descriptor instead.
func (*InterfaceIDMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{20}
}

func (x *InterfaceIDMsg) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

type GetInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Interface *Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *GetInterfaceResponse) Reset() {
	*x = GetInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfaceResponse) ProtoMessage() {}

func (x *GetInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfaceResponse.ProtoReflect.Descriptor instead.
func (*GetInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{21}
}

func (x *GetInterfaceResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetInterfaceResponse) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type ListInterfaceLoadBalancerPrefixesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
}

func (x *ListInterfaceLoadBalancerPrefixesRequest) Reset() {
	*x = ListInterfaceLoadBalancerPrefixesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterfaceLoadBalancerPrefixesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfaceLoadBalancerPrefixesRequest) ProtoMessage() {}

func (x *ListInterfaceLoadBalancerPrefixesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfaceLoadBalancerPrefixesRequest.ProtoReflect.Descriptor instead.
func (*ListInterfaceLoadBalancerPrefixesRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{22}
}

func (x *ListInterfaceLoadBalancerPrefixesRequest) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

type ListInterfaceLoadBalancerPrefixesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefixes []*LBPrefix `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	Status   *Status     `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListInterfaceLoadBalancerPrefixesResponse) Reset() {
	*x = ListInterfaceLoadBalancerPrefixesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInterfaceLoadBalancerPrefixesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInterfaceLoadBalancerPrefixesResponse) ProtoMessage() {}

func (x *ListInterfaceLoadBalancerPrefixesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInterfaceLoadBalancerPrefixesResponse.ProtoReflect.Descriptor instead.
func (*ListInterfaceLoadBalancerPrefixesResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{23}
}

func (x *ListInterfaceLoadBalancerPrefixesResponse) GetPrefixes() []*LBPrefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *ListInterfaceLoadBalancerPrefixesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type InterfaceVIPIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IpVersion     IPVersion `protobuf:"varint,2,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Address       []byte    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"` // Can be both ipv4 and ipv6
	UnderlayRoute []byte    `protobuf:"bytes,4,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *InterfaceVIPIP) Reset() {
	*x = InterfaceVIPIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceVIPIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceVIPIP) ProtoMessage() {}

func (x *InterfaceVIPIP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceVIPIP.ProtoReflect.Descriptor instead.
func (*InterfaceVIPIP) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{24}
}

func (x *InterfaceVIPIP) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InterfaceVIPIP) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *InterfaceVIPIP) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *InterfaceVIPIP) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type LBIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Address   []byte    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // Can be both ipv4 and ipv6
}

func (x *LBIP) Reset() {
	*x = LBIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LBIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBIP) ProtoMessage() {}

func (x *LBIP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBIP.ProtoReflect.Descriptor instead.
func (*LBIP) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{25}
}

func (x *LBIP) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *LBIP) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type NATIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Address   []byte    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // Can be both ipv4 and ipv6
}

func (x *NATIP) Reset() {
	*x = NATIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NATIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NATIP) ProtoMessage() {}

func (x *NATIP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NATIP.ProtoReflect.Descriptor instead.
func (*NATIP) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{26}
}

func (x *NATIP) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *NATIP) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type InterfaceVIPMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID    []byte          `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	InterfaceVIPIP *InterfaceVIPIP `protobuf:"bytes,2,opt,name=interfaceVIPIP,proto3" json:"interfaceVIPIP,omitempty"`
}

func (x *InterfaceVIPMsg) Reset() {
	*x = InterfaceVIPMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceVIPMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceVIPMsg) ProtoMessage() {}

func (x *InterfaceVIPMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceVIPMsg.ProtoReflect.Descriptor instead.
func (*InterfaceVIPMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{27}
}

func (x *InterfaceVIPMsg) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *InterfaceVIPMsg) GetInterfaceVIPIP() *InterfaceVIPIP {
	if x != nil {
		return x.InterfaceVIPIP
	}
	return nil
}

type GetLoadBalancerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalancerID []byte `protobuf:"bytes,1,opt,name=loadBalancerID,proto3" json:"loadBalancerID,omitempty"`
}

func (x *GetLoadBalancerRequest) Reset() {
	*x = GetLoadBalancerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadBalancerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadBalancerRequest) ProtoMessage() {}

func (x *GetLoadBalancerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadBalancerRequest.ProtoReflect.Descriptor instead.
func (*GetLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{28}
}

func (x *GetLoadBalancerRequest) GetLoadBalancerID() []byte {
	if x != nil {
		return x.LoadBalancerID
	}
	return nil
}

type GetLoadBalancerTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalancerID []byte `protobuf:"bytes,1,opt,name=loadBalancerID,proto3" json:"loadBalancerID,omitempty"`
}

func (x *GetLoadBalancerTargetsRequest) Reset() {
	*x = GetLoadBalancerTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadBalancerTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadBalancerTargetsRequest) ProtoMessage() {}

func (x *GetLoadBalancerTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadBalancerTargetsRequest.ProtoReflect.Descriptor instead.
func (*GetLoadBalancerTargetsRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{29}
}

func (x *GetLoadBalancerTargetsRequest) GetLoadBalancerID() []byte {
	if x != nil {
		return x.LoadBalancerID
	}
	return nil
}

type DeleteLoadBalancerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalancerID []byte `protobuf:"bytes,1,opt,name=loadBalancerID,proto3" json:"loadBalancerID,omitempty"`
}

func (x *DeleteLoadBalancerRequest) Reset() {
	*x = DeleteLoadBalancerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLoadBalancerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoadBalancerRequest) ProtoMessage() {}

func (x *DeleteLoadBalancerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoadBalancerRequest.ProtoReflect.Descriptor instead.
func (*DeleteLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteLoadBalancerRequest) GetLoadBalancerID() []byte {
	if x != nil {
		return x.LoadBalancerID
	}
	return nil
}

type LBPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=dpdkonmetal.Protocol" json:"protocol,omitempty"`
}

func (x *LBPort) Reset() {
	*x = LBPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LBPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBPort) ProtoMessage() {}

func (x *LBPort) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBPort.ProtoReflect.Descriptor instead.
func (*LBPort) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{31}
}

func (x *LBPort) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LBPort) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_Undefined
}

type GetLoadBalancerTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TargetIPs []*LBIP `protobuf:"bytes,2,rep,name=targetIPs,proto3" json:"targetIPs,omitempty"`
}

func (x *GetLoadBalancerTargetsResponse) Reset() {
	*x = GetLoadBalancerTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadBalancerTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadBalancerTargetsResponse) ProtoMessage() {}

func (x *GetLoadBalancerTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadBalancerTargetsResponse.ProtoReflect.Descriptor instead.
func (*GetLoadBalancerTargetsResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{32}
}

func (x *GetLoadBalancerTargetsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetLoadBalancerTargetsResponse) GetTargetIPs() []*LBIP {
	if x != nil {
		return x.TargetIPs
	}
	return nil
}

type GetLoadBalancerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	LbVipIP       *LBIP     `protobuf:"bytes,2,opt,name=lbVipIP,proto3" json:"lbVipIP,omitempty"`
	Vni           uint32    `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	Lbports       []*LBPort `protobuf:"bytes,4,rep,name=lbports,proto3" json:"lbports,omitempty"`
	UnderlayRoute []byte    `protobuf:"bytes,5,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *GetLoadBalancerResponse) Reset() {
	*x = GetLoadBalancerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadBalancerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadBalancerResponse) ProtoMessage() {}

func (x *GetLoadBalancerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadBalancerResponse.ProtoReflect.Descriptor instead.
func (*GetLoadBalancerResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{33}
}

func (x *GetLoadBalancerResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetLoadBalancerResponse) GetLbVipIP() *LBIP {
	if x != nil {
		return x.LbVipIP
	}
	return nil
}

func (x *GetLoadBalancerResponse) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *GetLoadBalancerResponse) GetLbports() []*LBPort {
	if x != nil {
		return x.Lbports
	}
	return nil
}

func (x *GetLoadBalancerResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type CreateLoadBalancerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalancerID []byte    `protobuf:"bytes,1,opt,name=loadBalancerID,proto3" json:"loadBalancerID,omitempty"`
	LbVipIP        *LBIP     `protobuf:"bytes,2,opt,name=lbVipIP,proto3" json:"lbVipIP,omitempty"`
	Vni            uint32    `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	Lbports        []*LBPort `protobuf:"bytes,4,rep,name=lbports,proto3" json:"lbports,omitempty"`
}

func (x *CreateLoadBalancerRequest) Reset() {
	*x = CreateLoadBalancerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLoadBalancerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLoadBalancerRequest) ProtoMessage() {}

func (x *CreateLoadBalancerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLoadBalancerRequest.ProtoReflect.Descriptor instead.
func (*CreateLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{34}
}

func (x *CreateLoadBalancerRequest) GetLoadBalancerID() []byte {
	if x != nil {
		return x.LoadBalancerID
	}
	return nil
}

func (x *CreateLoadBalancerRequest) GetLbVipIP() *LBIP {
	if x != nil {
		return x.LbVipIP
	}
	return nil
}

func (x *CreateLoadBalancerRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *CreateLoadBalancerRequest) GetLbports() []*LBPort {
	if x != nil {
		return x.Lbports
	}
	return nil
}

type AddLoadBalancerTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalancerID []byte `protobuf:"bytes,1,opt,name=loadBalancerID,proto3" json:"loadBalancerID,omitempty"`
	TargetIP       *LBIP  `protobuf:"bytes,2,opt,name=targetIP,proto3" json:"targetIP,omitempty"`
}

func (x *AddLoadBalancerTargetRequest) Reset() {
	*x = AddLoadBalancerTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLoadBalancerTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLoadBalancerTargetRequest) ProtoMessage() {}

func (x *AddLoadBalancerTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLoadBalancerTargetRequest.ProtoReflect.Descriptor instead.
func (*AddLoadBalancerTargetRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{35}
}

func (x *AddLoadBalancerTargetRequest) GetLoadBalancerID() []byte {
	if x != nil {
		return x.LoadBalancerID
	}
	return nil
}

func (x *AddLoadBalancerTargetRequest) GetTargetIP() *LBIP {
	if x != nil {
		return x.TargetIP
	}
	return nil
}

type DeleteLoadBalancerTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalancerID []byte `protobuf:"bytes,1,opt,name=loadBalancerID,proto3" json:"loadBalancerID,omitempty"`
	TargetIP       *LBIP  `protobuf:"bytes,2,opt,name=targetIP,proto3" json:"targetIP,omitempty"`
}

func (x *DeleteLoadBalancerTargetRequest) Reset() {
	*x = DeleteLoadBalancerTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLoadBalancerTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLoadBalancerTargetRequest) ProtoMessage() {}

func (x *DeleteLoadBalancerTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLoadBalancerTargetRequest.ProtoReflect.Descriptor instead.
func (*DeleteLoadBalancerTargetRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteLoadBalancerTargetRequest) GetLoadBalancerID() []byte {
	if x != nil {
		return x.LoadBalancerID
	}
	return nil
}

func (x *DeleteLoadBalancerTargetRequest) GetTargetIP() *LBIP {
	if x != nil {
		return x.TargetIP
	}
	return nil
}

type InterfacesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*Interface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	Status     *Status      `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *InterfacesMsg) Reset() {
	*x = InterfacesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfacesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMsg) ProtoMessage() {}

func (x *InterfacesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMsg.ProtoReflect.Descriptor instead.
func (*InterfacesMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{37}
}

func (x *InterfacesMsg) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *InterfacesMsg) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AddNATRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	NatVIPIP    *NATIP `protobuf:"bytes,2,opt,name=natVIPIP,proto3" json:"natVIPIP,omitempty"`
	MinPort     uint32 `protobuf:"varint,3,opt,name=minPort,proto3" json:"minPort,omitempty"` // port should be uint16 (less than 65536)
	MaxPort     uint32 `protobuf:"varint,4,opt,name=maxPort,proto3" json:"maxPort,omitempty"`
}

func (x *AddNATRequest) Reset() {
	*x = AddNATRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNATRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNATRequest) ProtoMessage() {}

func (x *AddNATRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNATRequest.ProtoReflect.Descriptor instead.
func (*AddNATRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{38}
}

func (x *AddNATRequest) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *AddNATRequest) GetNatVIPIP() *NATIP {
	if x != nil {
		return x.NatVIPIP
	}
	return nil
}

func (x *AddNATRequest) GetMinPort() uint32 {
	if x != nil {
		return x.MinPort
	}
	return 0
}

func (x *AddNATRequest) GetMaxPort() uint32 {
	if x != nil {
		return x.MaxPort
	}
	return 0
}

type GetNATRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
}

func (x *GetNATRequest) Reset() {
	*x = GetNATRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNATRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNATRequest) ProtoMessage() {}

func (x *GetNATRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNATRequest.ProtoReflect.Descriptor instead.
func (*GetNATRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{39}
}

func (x *GetNATRequest) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

type GetNATInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatVIPIP    *NATIP      `protobuf:"bytes,1,opt,name=natVIPIP,proto3" json:"natVIPIP,omitempty"` // list all local machines that are behind this IP
	NatInfoType NATInfoType `protobuf:"varint,2,opt,name=natInfoType,proto3,enum=dpdkonmetal.NATInfoType" json:"natInfoType,omitempty"`
}

func (x *GetNATInfoRequest) Reset() {
	*x = GetNATInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNATInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNATInfoRequest) ProtoMessage() {}

func (x *GetNATInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNATInfoRequest.ProtoReflect.Descriptor instead.
func (*GetNATInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{40}
}

func (x *GetNATInfoRequest) GetNatVIPIP() *NATIP {
	if x != nil {
		return x.NatVIPIP
	}
	return nil
}

func (x *GetNATInfoRequest) GetNatInfoType() NATInfoType {
	if x != nil {
		return x.NatInfoType
	}
	return NATInfoType_NATInfoTypeZero
}

type NATInfoEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion     IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Address       []byte    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // Can be both ipv4 and ipv6
	MinPort       uint32    `protobuf:"varint,3,opt,name=minPort,proto3" json:"minPort,omitempty"`
	MaxPort       uint32    `protobuf:"varint,4,opt,name=maxPort,proto3" json:"maxPort,omitempty"`
	UnderlayRoute []byte    `protobuf:"bytes,5,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
	Vni           uint32    `protobuf:"varint,6,opt,name=vni,proto3" json:"vni,omitempty"`
}

func (x *NATInfoEntry) Reset() {
	*x = NATInfoEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NATInfoEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NATInfoEntry) ProtoMessage() {}

func (x *NATInfoEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NATInfoEntry.ProtoReflect.Descriptor instead.
func (*NATInfoEntry) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{41}
}

func (x *NATInfoEntry) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *NATInfoEntry) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *NATInfoEntry) GetMinPort() uint32 {
	if x != nil {
		return x.MinPort
	}
	return 0
}

func (x *NATInfoEntry) GetMaxPort() uint32 {
	if x != nil {
		return x.MaxPort
	}
	return 0
}

func (x *NATInfoEntry) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

func (x *NATInfoEntry) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

type GetNATInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatVIPIP       *NATIP          `protobuf:"bytes,1,opt,name=natVIPIP,proto3" json:"natVIPIP,omitempty"`
	NatInfoType    NATInfoType     `protobuf:"varint,2,opt,name=natInfoType,proto3,enum=dpdkonmetal.NATInfoType" json:"natInfoType,omitempty"`
	NatInfoEntries []*NATInfoEntry `protobuf:"bytes,3,rep,name=natInfoEntries,proto3" json:"natInfoEntries,omitempty"`
	Status         *Status         `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetNATInfoResponse) Reset() {
	*x = GetNATInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNATInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNATInfoResponse) ProtoMessage() {}

func (x *GetNATInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNATInfoResponse.ProtoReflect.Descriptor instead.
func (*GetNATInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{42}
}

func (x *GetNATInfoResponse) GetNatVIPIP() *NATIP {
	if x != nil {
		return x.NatVIPIP
	}
	return nil
}

func (x *GetNATInfoResponse) GetNatInfoType() NATInfoType {
	if x != nil {
		return x.NatInfoType
	}
	return NATInfoType_NATInfoTypeZero
}

func (x *GetNATInfoResponse) GetNatInfoEntries() []*NATInfoEntry {
	if x != nil {
		return x.NatInfoEntries
	}
	return nil
}

func (x *GetNATInfoResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeleteNATRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
}

func (x *DeleteNATRequest) Reset() {
	*x = DeleteNATRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNATRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNATRequest) ProtoMessage() {}

func (x *DeleteNATRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNATRequest.ProtoReflect.Descriptor instead.
func (*DeleteNATRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{43}
}

func (x *DeleteNATRequest) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

type AddNeighborNATRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatVIPIP      *NATIP `protobuf:"bytes,1,opt,name=natVIPIP,proto3" json:"natVIPIP,omitempty"`
	Vni           uint32 `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	MinPort       uint32 `protobuf:"varint,3,opt,name=minPort,proto3" json:"minPort,omitempty"` // port should be uint16 (less than 65536)
	MaxPort       uint32 `protobuf:"varint,4,opt,name=maxPort,proto3" json:"maxPort,omitempty"`
	UnderlayRoute []byte `protobuf:"bytes,5,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *AddNeighborNATRequest) Reset() {
	*x = AddNeighborNATRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNeighborNATRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNeighborNATRequest) ProtoMessage() {}

func (x *AddNeighborNATRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNeighborNATRequest.ProtoReflect.Descriptor instead.
func (*AddNeighborNATRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{44}
}

func (x *AddNeighborNATRequest) GetNatVIPIP() *NATIP {
	if x != nil {
		return x.NatVIPIP
	}
	return nil
}

func (x *AddNeighborNATRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *AddNeighborNATRequest) GetMinPort() uint32 {
	if x != nil {
		return x.MinPort
	}
	return 0
}

func (x *AddNeighborNATRequest) GetMaxPort() uint32 {
	if x != nil {
		return x.MaxPort
	}
	return 0
}

func (x *AddNeighborNATRequest) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type DeleteNeighborNATRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatVIPIP *NATIP `protobuf:"bytes,1,opt,name=natVIPIP,proto3" json:"natVIPIP,omitempty"`
	Vni      uint32 `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	MinPort  uint32 `protobuf:"varint,3,opt,name=minPort,proto3" json:"minPort,omitempty"` // port should be uint16 (less than 65536)
	MaxPort  uint32 `protobuf:"varint,4,opt,name=maxPort,proto3" json:"maxPort,omitempty"`
}

func (x *DeleteNeighborNATRequest) Reset() {
	*x = DeleteNeighborNATRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNeighborNATRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNeighborNATRequest) ProtoMessage() {}

func (x *DeleteNeighborNATRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNeighborNATRequest.ProtoReflect.Descriptor instead.
func (*DeleteNeighborNATRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteNeighborNATRequest) GetNatVIPIP() *NATIP {
	if x != nil {
		return x.NatVIPIP
	}
	return nil
}

func (x *DeleteNeighborNATRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *DeleteNeighborNATRequest) GetMinPort() uint32 {
	if x != nil {
		return x.MinPort
	}
	return 0
}

func (x *DeleteNeighborNATRequest) GetMaxPort() uint32 {
	if x != nil {
		return x.MaxPort
	}
	return 0
}

type RuleIDMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleID []byte `protobuf:"bytes,1,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
}

func (x *RuleIDMsg) Reset() {
	*x = RuleIDMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleIDMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleIDMsg) ProtoMessage() {}

func (x *RuleIDMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleIDMsg.ProtoReflect.Descriptor instead.
func (*RuleIDMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{46}
}

func (x *RuleIDMsg) GetRuleID() []byte {
	if x != nil {
		return x.RuleID
	}
	return nil
}

type ThrottlingConfigMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID      *InterfaceIDMsg   `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	ThrottlingConfig *ThrottlingConfig `protobuf:"bytes,2,opt,name=throttlingConfig,proto3" json:"throttlingConfig,omitempty"`
}

func (x *ThrottlingConfigMsg) Reset() {
	*x = ThrottlingConfigMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrottlingConfigMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottlingConfigMsg) ProtoMessage() {}

func (x *ThrottlingConfigMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottlingConfigMsg.ProtoReflect.Descriptor instead.
func (*ThrottlingConfigMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{47}
}

func (x *ThrottlingConfigMsg) GetInterfaceID() *InterfaceIDMsg {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *ThrottlingConfigMsg) GetThrottlingConfig() *ThrottlingConfig {
	if x != nil {
		return x.ThrottlingConfig
	}
	return nil
}

type CreateInterfaceLoadBalancerPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID *InterfaceIDMsg `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	Prefix      *Prefix         `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *CreateInterfaceLoadBalancerPrefixRequest) Reset() {
	*x = CreateInterfaceLoadBalancerPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceLoadBalancerPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceLoadBalancerPrefixRequest) ProtoMessage() {}

func (x *CreateInterfaceLoadBalancerPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceLoadBalancerPrefixRequest.ProtoReflect.Descriptor instead.
func (*CreateInterfaceLoadBalancerPrefixRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{48}
}

func (x *CreateInterfaceLoadBalancerPrefixRequest) GetInterfaceID() *InterfaceIDMsg {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *CreateInterfaceLoadBalancerPrefixRequest) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type DeleteInterfaceLoadBalancerPrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID *InterfaceIDMsg `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	Prefix      *Prefix         `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *DeleteInterfaceLoadBalancerPrefixRequest) Reset() {
	*x = DeleteInterfaceLoadBalancerPrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInterfaceLoadBalancerPrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInterfaceLoadBalancerPrefixRequest) ProtoMessage() {}

func (x *DeleteInterfaceLoadBalancerPrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInterfaceLoadBalancerPrefixRequest.ProtoReflect.Descriptor instead.
func (*DeleteInterfaceLoadBalancerPrefixRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteInterfaceLoadBalancerPrefixRequest) GetInterfaceID() *InterfaceIDMsg {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *DeleteInterfaceLoadBalancerPrefixRequest) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type InterfacePrefixMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID *InterfaceIDMsg `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	Prefix      *Prefix         `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *InterfacePrefixMsg) Reset() {
	*x = InterfacePrefixMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfacePrefixMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacePrefixMsg) ProtoMessage() {}

func (x *InterfacePrefixMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacePrefixMsg.ProtoReflect.Descriptor instead.
func (*InterfacePrefixMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{50}
}

func (x *InterfacePrefixMsg) GetInterfaceID() *InterfaceIDMsg {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *InterfacePrefixMsg) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type PrefixesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefixes []*Prefix `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
	Status   *Status   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PrefixesMsg) Reset() {
	*x = PrefixesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixesMsg) ProtoMessage() {}

func (x *PrefixesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixesMsg.ProtoReflect.Descriptor instead.
func (*PrefixesMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{51}
}

func (x *PrefixesMsg) GetPrefixes() []*Prefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

func (x *PrefixesMsg) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type VNIMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni uint32 `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
}

func (x *VNIMsg) Reset() {
	*x = VNIMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNIMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNIMsg) ProtoMessage() {}

func (x *VNIMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNIMsg.ProtoReflect.Descriptor instead.
func (*VNIMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{52}
}

func (x *VNIMsg) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

type VNIRouteMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni   *VNIMsg `protobuf:"bytes,1,opt,name=vni,proto3" json:"vni,omitempty"`
	Route *Route  `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *VNIRouteMsg) Reset() {
	*x = VNIRouteMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNIRouteMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNIRouteMsg) ProtoMessage() {}

func (x *VNIRouteMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNIRouteMsg.ProtoReflect.Descriptor instead.
func (*VNIRouteMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{53}
}

func (x *VNIRouteMsg) GetVni() *VNIMsg {
	if x != nil {
		return x.Vni
	}
	return nil
}

func (x *VNIRouteMsg) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type RoutesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	Status *Status  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RoutesMsg) Reset() {
	*x = RoutesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutesMsg) ProtoMessage() {}

func (x *RoutesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutesMsg.ProtoReflect.Descriptor instead.
func (*RoutesMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{54}
}

func (x *RoutesMsg) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *RoutesMsg) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListFirewallRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
}

func (x *ListFirewallRulesRequest) Reset() {
	*x = ListFirewallRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFirewallRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFirewallRulesRequest) ProtoMessage() {}

func (x *ListFirewallRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFirewallRulesRequest.ProtoReflect.Descriptor instead.
func (*ListFirewallRulesRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{55}
}

func (x *ListFirewallRulesRequest) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

type ListFirewallRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules  []*FirewallRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	Status *Status         `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListFirewallRulesResponse) Reset() {
	*x = ListFirewallRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFirewallRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFirewallRulesResponse) ProtoMessage() {}

func (x *ListFirewallRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFirewallRulesResponse.ProtoReflect.Descriptor instead.
func (*ListFirewallRulesResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{56}
}

func (x *ListFirewallRulesResponse) GetRules() []*FirewallRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *ListFirewallRulesResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetFirewallRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	RuleID      []byte `protobuf:"bytes,2,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
}

func (x *GetFirewallRuleRequest) Reset() {
	*x = GetFirewallRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirewallRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirewallRuleRequest) ProtoMessage() {}

func (x *GetFirewallRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirewallRuleRequest.ProtoReflect.Descriptor instead.
func (*GetFirewallRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{57}
}

func (x *GetFirewallRuleRequest) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *GetFirewallRuleRequest) GetRuleID() []byte {
	if x != nil {
		return x.RuleID
	}
	return nil
}

type GetFirewallRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Rule   *FirewallRule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *GetFirewallRuleResponse) Reset() {
	*x = GetFirewallRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirewallRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirewallRuleResponse) ProtoMessage() {}

func (x *GetFirewallRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirewallRuleResponse.ProtoReflect.Descriptor instead.
func (*GetFirewallRuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{58}
}

func (x *GetFirewallRuleResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetFirewallRuleResponse) GetRule() *FirewallRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type DeleteFirewallRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	RuleID      []byte `protobuf:"bytes,2,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
}

func (x *DeleteFirewallRuleRequest) Reset() {
	*x = DeleteFirewallRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFirewallRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFirewallRuleRequest) ProtoMessage() {}

func (x *DeleteFirewallRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFirewallRuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteFirewallRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteFirewallRuleRequest) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *DeleteFirewallRuleRequest) GetRuleID() []byte {
	if x != nil {
		return x.RuleID
	}
	return nil
}

type AddFirewallRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte        `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	Rule        *FirewallRule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *AddFirewallRuleRequest) Reset() {
	*x = AddFirewallRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFirewallRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFirewallRuleRequest) ProtoMessage() {}

func (x *AddFirewallRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFirewallRuleRequest.ProtoReflect.Descriptor instead.
func (*AddFirewallRuleRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{60}
}

func (x *AddFirewallRuleRequest) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *AddFirewallRuleRequest) GetRule() *FirewallRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type AddFirewallRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RuleID []byte  `protobuf:"bytes,2,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
}

func (x *AddFirewallRuleResponse) Reset() {
	*x = AddFirewallRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFirewallRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFirewallRuleResponse) ProtoMessage() {}

func (x *AddFirewallRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFirewallRuleResponse.ProtoReflect.Descriptor instead.
func (*AddFirewallRuleResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{61}
}

func (x *AddFirewallRuleResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AddFirewallRuleResponse) GetRuleID() []byte {
	if x != nil {
		return x.RuleID
	}
	return nil
}

type UUIDMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *UUIDMsg) Reset() {
	*x = UUIDMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDMsg) ProtoMessage() {}

func (x *UUIDMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDMsg.ProtoReflect.Descriptor instead.
func (*UUIDMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{62}
}

func (x *UUIDMsg) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type VirtualFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`          // Linux VF NIC device name
	Domain   uint32 `protobuf:"varint,2,opt,name=domain,proto3" json:"domain,omitempty"`     // PCIe Domain
	Bus      uint32 `protobuf:"varint,3,opt,name=bus,proto3" json:"bus,omitempty"`           // PCIe Bus
	Slot     uint32 `protobuf:"varint,4,opt,name=slot,proto3" json:"slot,omitempty"`         // PCIe Slot
	Function uint32 `protobuf:"varint,5,opt,name=function,proto3" json:"function,omitempty"` // PCIe Function
}

func (x *VirtualFunction) Reset() {
	*x = VirtualFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualFunction) ProtoMessage() {}

func (x *VirtualFunction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualFunction.ProtoReflect.Descriptor instead.
func (*VirtualFunction) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{63}
}

func (x *VirtualFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualFunction) GetDomain() uint32 {
	if x != nil {
		return x.Domain
	}
	return 0
}

func (x *VirtualFunction) GetBus() uint32 {
	if x != nil {
		return x.Bus
	}
	return 0
}

func (x *VirtualFunction) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *VirtualFunction) GetFunction() uint32 {
	if x != nil {
		return x.Function
	}
	return 0
}

type CreateInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *IpAdditionResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Vf       *VirtualFunction    `protobuf:"bytes,2,opt,name=vf,proto3" json:"vf,omitempty"` // Holds VF information when a VM has been created.
}

func (x *CreateInterfaceResponse) Reset() {
	*x = CreateInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceResponse) ProtoMessage() {}

func (x *CreateInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceResponse.ProtoReflect.Descriptor instead.
func (*CreateInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{64}
}

func (x *CreateInterfaceResponse) GetResponse() *IpAdditionResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateInterfaceResponse) GetVf() *VirtualFunction {
	if x != nil {
		return x.Vf
	}
	return nil
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion      IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Prefix         *Prefix   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	NexthopVNI     uint32    `protobuf:"varint,3,opt,name=nexthopVNI,proto3" json:"nexthopVNI,omitempty"`
	NexthopAddress []byte    `protobuf:"bytes,4,opt,name=nexthopAddress,proto3" json:"nexthopAddress,omitempty"`
	Weight         uint32    `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{65}
}

func (x *Route) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *Route) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Route) GetNexthopVNI() uint32 {
	if x != nil {
		return x.NexthopVNI
	}
	return 0
}

func (x *Route) GetNexthopAddress() []byte {
	if x != nil {
		return x.NexthopAddress
	}
	return nil
}

func (x *Route) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type IsVniInUseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni  uint32  `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
	Type VniType `protobuf:"varint,2,opt,name=type,proto3,enum=dpdkonmetal.VniType" json:"type,omitempty"`
}

func (x *IsVniInUseRequest) Reset() {
	*x = IsVniInUseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsVniInUseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsVniInUseRequest) ProtoMessage() {}

func (x *IsVniInUseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsVniInUseRequest.ProtoReflect.Descriptor instead.
func (*IsVniInUseRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{66}
}

func (x *IsVniInUseRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *IsVniInUseRequest) GetType() VniType {
	if x != nil {
		return x.Type
	}
	return VniType_VniIpv4
}

type IsVniInUseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InUse  bool    `protobuf:"varint,1,opt,name=inUse,proto3" json:"inUse,omitempty"`
	Status *Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IsVniInUseResponse) Reset() {
	*x = IsVniInUseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsVniInUseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsVniInUseResponse) ProtoMessage() {}

func (x *IsVniInUseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsVniInUseResponse.ProtoReflect.Descriptor instead.
func (*IsVniInUseResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{67}
}

func (x *IsVniInUseResponse) GetInUse() bool {
	if x != nil {
		return x.InUse
	}
	return false
}

func (x *IsVniInUseResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ResetVniRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni  uint32  `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
	Type VniType `protobuf:"varint,2,opt,name=type,proto3,enum=dpdkonmetal.VniType" json:"type,omitempty"`
}

func (x *ResetVniRequest) Reset() {
	*x = ResetVniRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetVniRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetVniRequest) ProtoMessage() {}

func (x *ResetVniRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetVniRequest.ProtoReflect.Descriptor instead.
func (*ResetVniRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{68}
}

func (x *ResetVniRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *ResetVniRequest) GetType() VniType {
	if x != nil {
		return x.Type
	}
	return VniType_VniIpv4
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientProto string `protobuf:"bytes,1,opt,name=clientProto,proto3" json:"clientProto,omitempty"`
	ClientName  string `protobuf:"bytes,2,opt,name=clientName,proto3" json:"clientName,omitempty"`
	ClientVer   string `protobuf:"bytes,3,opt,name=clientVer,proto3" json:"clientVer,omitempty"`
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{69}
}

func (x *GetVersionRequest) GetClientProto() string {
	if x != nil {
		return x.ClientProto
	}
	return ""
}

func (x *GetVersionRequest) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *GetVersionRequest) GetClientVer() string {
	if x != nil {
		return x.ClientVer
	}
	return ""
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	SvcProto string  `protobuf:"bytes,2,opt,name=svcProto,proto3" json:"svcProto,omitempty"`
	SvcVer   string  `protobuf:"bytes,3,opt,name=svcVer,proto3" json:"svcVer,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{70}
}

func (x *GetVersionResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetVersionResponse) GetSvcProto() string {
	if x != nil {
		return x.SvcProto
	}
	return ""
}

func (x *GetVersionResponse) GetSvcVer() string {
	if x != nil {
		return x.SvcVer
	}
	return ""
}

var File_proto_dpdk_proto protoreflect.FileDescriptor

var file_proto_dpdk_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x70, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x22,
	0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7e, 0x0a, 0x29, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x67, 0x0a, 0x12, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x22, 0x63, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x54, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e,
	0x41, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x56, 0x49,
	0x50, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4e, 0x41, 0x54, 0x49, 0x50, 0x52, 0x08, 0x6e,
	0x61, 0x74, 0x56, 0x49, 0x50, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x22, 0x6f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa2, 0x01, 0x0a, 0x06,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x22, 0xa4, 0x01, 0x0a, 0x08, 0x4c, 0x42, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x34, 0x0a,
	0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49,
	0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x09, 0x50, 0x58, 0x45, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04, 0x69,
	0x63, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x43, 0x4d, 0x50, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x69, 0x63, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x63,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x54, 0x43, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x55, 0x44, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x64, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x0a,
	0x49, 0x43, 0x4d, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63,
	0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x63,
	0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x22, 0x9b, 0x01, 0x0a, 0x09, 0x55, 0x44, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x70, 0x65, 0x72, 0x22, 0xab,
	0x03, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x41, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa4, 0x03, 0x0a,
	0x08, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x68, 0x63,
	0x70, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x68, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x68, 0x63, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x68, 0x63, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x78, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x58, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x70, 0x78, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x74, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x74, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12,
	0x3f, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x67,
	0x61, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x67,
	0x61, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x36,
	0x0a, 0x16, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x67, 0x61, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x65, 0x67, 0x61, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x22, 0xe7, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x0a,
	0x69, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49,
	0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x74, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xae,
	0x02, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x50, 0x76, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x50, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x49, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x63, 0x69, 0x44, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x63, 0x69, 0x44, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x32, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d, 0x73,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x22, 0x8b, 0x01, 0x0a,
	0x29, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x42, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x49, 0x50, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x22, 0x56, 0x0a, 0x04, 0x4c, 0x42, 0x49, 0x50, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x57, 0x0a, 0x05, 0x4e, 0x41, 0x54, 0x49,
	0x50, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x78, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49,
	0x50, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x49, 0x50, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x49, 0x50, 0x22, 0x40, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x44, 0x22, 0x47, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x49, 0x44, 0x22, 0x43, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x06, 0x4c,
	0x42, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x7e, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x50, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x42, 0x49,
	0x50, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x50, 0x73, 0x22, 0xda, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6c, 0x62, 0x56, 0x69, 0x70, 0x49, 0x50,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x42, 0x49, 0x50, 0x52, 0x07, 0x6c, 0x62, 0x56, 0x69, 0x70,
	0x49, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x76, 0x6e, 0x69, 0x12, 0x2d, 0x0a, 0x07, 0x6c, 0x62, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x42, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x6c, 0x62, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x07, 0x6c, 0x62, 0x56, 0x69, 0x70, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c,
	0x42, 0x49, 0x50, 0x52, 0x07, 0x6c, 0x62, 0x56, 0x69, 0x70, 0x49, 0x50, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x2d,
	0x0a, 0x07, 0x6c, 0x62, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x42,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x6c, 0x62, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x75, 0x0a,
	0x1c, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x42, 0x49, 0x50, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x50, 0x22, 0x78, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2d, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x4c, 0x42, 0x49, 0x50, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x50, 0x22, 0x74,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x12,
	0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x54, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x56,
	0x49, 0x50, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4e, 0x41, 0x54, 0x49, 0x50, 0x52, 0x08,
	0x6e, 0x61, 0x74, 0x56, 0x49, 0x50, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x31, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4e, 0x41, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x22,
	0x7f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x56, 0x49, 0x50, 0x49, 0x50,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4e, 0x41, 0x54, 0x49, 0x50, 0x52, 0x08, 0x6e, 0x61, 0x74, 0x56,
	0x49, 0x50, 0x49, 0x50, 0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xca, 0x01, 0x0a, 0x0c, 0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x6e, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x22, 0xf0, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x56, 0x49, 0x50, 0x49, 0x50,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4e, 0x41, 0x54, 0x49, 0x50, 0x52, 0x08, 0x6e, 0x61, 0x74, 0x56,
	0x49, 0x50, 0x49, 0x50, 0x12, 0x3a, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x6e, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x34, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x41, 0x54, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x41, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x56, 0x49, 0x50, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x4e, 0x41, 0x54, 0x49, 0x50, 0x52, 0x08, 0x6e, 0x61, 0x74, 0x56, 0x49, 0x50, 0x49, 0x50,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76,
	0x6e, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e,
	0x41, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x61, 0x74,
	0x56, 0x49, 0x50, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4e, 0x41, 0x54, 0x49, 0x50, 0x52,
	0x08, 0x6e, 0x61, 0x74, 0x56, 0x49, 0x50, 0x49, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0x23, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x10, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x96, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22,
	0x96, 0x01, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x73, 0x67, 0x12,
	0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d, 0x73,
	0x67, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2b,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x6b, 0x0a, 0x0b, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1a, 0x0a, 0x06, 0x56, 0x4e, 0x49, 0x4d,
	0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x76, 0x6e, 0x69, 0x22, 0x5e, 0x0a, 0x0b, 0x56, 0x4e, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x56,
	0x4e, 0x49, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x22, 0x64, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x4d, 0x73,
	0x67, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2d, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x55,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x22, 0x5e, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44,
	0x22, 0x1d, 0x0a, 0x07, 0x55, 0x55, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x7f, 0x0a, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x84, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x76, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x76, 0x66, 0x22, 0xca, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x56,
	0x4e, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x56, 0x4e, 0x49, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x4f, 0x0a, 0x11, 0x49, 0x73, 0x56, 0x6e, 0x69, 0x49, 0x6e, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x56, 0x6e, 0x69, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x12, 0x49, 0x73, 0x56, 0x6e, 0x69, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x55, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x55, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4d,
	0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x76, 0x6e, 0x69, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x56, 0x6e, 0x69, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x73, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x22, 0x75, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x76, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x76, 0x63, 0x56, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x76, 0x63, 0x56, 0x65, 0x72, 0x2a, 0x3d, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x42, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0x01, 0x2a, 0x1f, 0x0a, 0x09, 0x49, 0x50, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36, 0x10, 0x01, 0x2a, 0x4c, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x11,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x43, 0x4d, 0x50, 0x76, 0x36, 0x10, 0x3a, 0x12, 0x09, 0x0a, 0x04,
	0x53, 0x43, 0x54, 0x50, 0x10, 0x84, 0x01, 0x2a, 0x2b, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x01, 0x2a, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10, 0x01, 0x2a, 0x46, 0x0a, 0x0b,
	0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e,
	0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x07, 0x56, 0x6e, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x56, 0x6e, 0x69, 0x49, 0x70, 0x76, 0x34, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x56, 0x6e, 0x69, 0x49, 0x70, 0x76, 0x36, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x6e, 0x69,
	0x49, 0x70, 0x76, 0x34, 0x41, 0x6e, 0x64, 0x49, 0x70, 0x76, 0x36, 0x10, 0x02, 0x32, 0xc0, 0x19,
	0x0a, 0x0b, 0x44, 0x50, 0x44, 0x4b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a,
	0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x12, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x14, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x12, 0x17, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d,
	0x73, 0x67, 0x1a, 0x21, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x1a, 0x18, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x94,
	0x01, 0x0a, 0x21, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x35, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x21,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x35, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56,
	0x49, 0x50, 0x12, 0x1c, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x4d, 0x73, 0x67,
	0x1a, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x4d, 0x73, 0x67, 0x1a, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x49, 0x50,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x12, 0x26, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x15, 0x61, 0x64,
	0x64, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x2a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x18, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x61,
	0x64, 0x64, 0x4e, 0x41, 0x54, 0x12, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x41, 0x64, 0x64, 0x4e, 0x41, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x4e, 0x41, 0x54, 0x12, 0x1a, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x54, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x41, 0x54, 0x12, 0x1d, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x41, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x41, 0x54, 0x12, 0x22, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x4e, 0x41, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x41, 0x54, 0x12, 0x25, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x41, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x4e,
	0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x56, 0x4e, 0x49, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x56, 0x4e, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x56, 0x4e, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x69, 0x73, 0x56, 0x6e, 0x69, 0x49, 0x6e, 0x55, 0x73,
	0x65, 0x12, 0x1e, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x49, 0x73, 0x56, 0x6e, 0x69, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x49, 0x73, 0x56, 0x6e, 0x69, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x74, 0x56, 0x6e, 0x69,
	0x12, 0x1c, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x56, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x61,
	0x64, 0x64, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x23,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x67,
	0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x23,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x12, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x26, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00,
	0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x64, 0x70, 0x64, 0x6b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_dpdk_proto_rawDescOnce sync.Once
	file_proto_dpdk_proto_rawDescData = file_proto_dpdk_proto_rawDesc
)

func file_proto_dpdk_proto_rawDescGZIP() []byte {
	file_proto_dpdk_proto_rawDescOnce.Do(func() {
		file_proto_dpdk_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_dpdk_proto_rawDescData)
	})
	return file_proto_dpdk_proto_rawDescData
}

var file_proto_dpdk_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_proto_dpdk_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_proto_dpdk_proto_goTypes = []interface{}{
	(InterfaceType)(0),    // 0: dpdkonmetal.InterfaceType
	(IPVersion)(0),        // 1: dpdkonmetal.IPVersion
	(Protocol)(0),         // 2: dpdkonmetal.Protocol
	(TrafficDirection)(0), // 3: dpdkonmetal.TrafficDirection
	(FirewallAction)(0),   // 4: dpdkonmetal.FirewallAction
	(NATInfoType)(0),      // 5: dpdkonmetal.NATInfoType
	(VniType)(0),          // 6: dpdkonmetal.VniType
	(*Status)(nil),        // 7: dpdkonmetal.Status
	(*CreateInterfaceLoadBalancerPrefixResponse)(nil), // 8: dpdkonmetal.CreateInterfaceLoadBalancerPrefixResponse
	(*IpAdditionResponse)(nil),                        // 9: dpdkonmetal.IpAdditionResponse
	(*AddNATResponse)(nil),                            // 10: dpdkonmetal.AddNATResponse
	(*GetNATResponse)(nil),                            // 11: dpdkonmetal.GetNATResponse
	(*CreateLoadBalancerResponse)(nil),                // 12: dpdkonmetal.CreateLoadBalancerResponse
	(*Empty)(nil),                                     // 13: dpdkonmetal.Empty
	(*Prefix)(nil),                                    // 14: dpdkonmetal.Prefix
	(*LBPrefix)(nil),                                  // 15: dpdkonmetal.LBPrefix
	(*InitConfig)(nil),                                // 16: dpdkonmetal.InitConfig
	(*PXEConfig)(nil),                                 // 17: dpdkonmetal.PXEConfig
	(*ProtocolFilter)(nil),                            // 18: dpdkonmetal.ProtocolFilter
	(*ICMPFilter)(nil),                                // 19: dpdkonmetal.ICMPFilter
	(*TCPFilter)(nil),                                 // 20: dpdkonmetal.TCPFilter
	(*UDPFilter)(nil),                                 // 21: dpdkonmetal.UDPFilter
	(*FirewallRule)(nil),                              // 22: dpdkonmetal.FirewallRule
	(*IPConfig)(nil),                                  // 23: dpdkonmetal.IPConfig
	(*ThrottlingConfig)(nil),                          // 24: dpdkonmetal.ThrottlingConfig
	(*CreateInterfaceRequest)(nil),                    // 25: dpdkonmetal.CreateInterfaceRequest
	(*Interface)(nil),                                 // 26: dpdkonmetal.Interface
	(*InterfaceIDMsg)(nil),                            // 27: dpdkonmetal.InterfaceIDMsg
	(*GetInterfaceResponse)(nil),                      // 28: dpdkonmetal.GetInterfaceResponse
	(*ListInterfaceLoadBalancerPrefixesRequest)(nil),  // 29: dpdkonmetal.ListInterfaceLoadBalancerPrefixesRequest
	(*ListInterfaceLoadBalancerPrefixesResponse)(nil), // 30: dpdkonmetal.ListInterfaceLoadBalancerPrefixesResponse
	(*InterfaceVIPIP)(nil),                            // 31: dpdkonmetal.InterfaceVIPIP
	(*LBIP)(nil),                                      // 32: dpdkonmetal.LBIP
	(*NATIP)(nil),                                     // 33: dpdkonmetal.NATIP
	(*InterfaceVIPMsg)(nil),                           // 34: dpdkonmetal.InterfaceVIPMsg
	(*GetLoadBalancerRequest)(nil),                    // 35: dpdkonmetal.GetLoadBalancerRequest
	(*GetLoadBalancerTargetsRequest)(nil),             // 36: dpdkonmetal.GetLoadBalancerTargetsRequest
	(*DeleteLoadBalancerRequest)(nil),                 // 37: dpdkonmetal.DeleteLoadBalancerRequest
	(*LBPort)(nil),                                    // 38: dpdkonmetal.LBPort
	(*GetLoadBalancerTargetsResponse)(nil),            // 39: dpdkonmetal.GetLoadBalancerTargetsResponse
	(*GetLoadBalancerResponse)(nil),                   // 40: dpdkonmetal.GetLoadBalancerResponse
	(*CreateLoadBalancerRequest)(nil),                 // 41: dpdkonmetal.CreateLoadBalancerRequest
	(*AddLoadBalancerTargetRequest)(nil),              // 42: dpdkonmetal.AddLoadBalancerTargetRequest
	(*DeleteLoadBalancerTargetRequest)(nil),           // 43: dpdkonmetal.DeleteLoadBalancerTargetRequest
	(*InterfacesMsg)(nil),                             // 44: dpdkonmetal.InterfacesMsg
	(*AddNATRequest)(nil),                             // 45: dpdkonmetal.AddNATRequest
	(*GetNATRequest)(nil),                             // 46: dpdkonmetal.GetNATRequest
	(*GetNATInfoRequest)(nil),                         // 47: dpdkonmetal.GetNATInfoRequest
	(*NATInfoEntry)(nil),                              // 48: dpdkonmetal.NATInfoEntry
	(*GetNATInfoResponse)(nil),                        // 49: dpdkonmetal.GetNATInfoResponse
	(*DeleteNATRequest)(nil),                          // 50: dpdkonmetal.DeleteNATRequest
	(*AddNeighborNATRequest)(nil),                     // 51: dpdkonmetal.AddNeighborNATRequest
	(*DeleteNeighborNATRequest)(nil),                  // 52: dpdkonmetal.DeleteNeighborNATRequest
	(*RuleIDMsg)(nil),                                 // 53: dpdkonmetal.RuleIDMsg
	(*ThrottlingConfigMsg)(nil),                       // 54: dpdkonmetal.ThrottlingConfigMsg
	(*CreateInterfaceLoadBalancerPrefixRequest)(nil),  // 55: dpdkonmetal.CreateInterfaceLoadBalancerPrefixRequest
	(*DeleteInterfaceLoadBalancerPrefixRequest)(nil),  // 56: dpdkonmetal.DeleteInterfaceLoadBalancerPrefixRequest
	(*InterfacePrefixMsg)(nil),                        // 57: dpdkonmetal.InterfacePrefixMsg
	(*PrefixesMsg)(nil),                               // 58: dpdkonmetal.PrefixesMsg
	(*VNIMsg)(nil),                                    // 59: dpdkonmetal.VNIMsg
	(*VNIRouteMsg)(nil),                               // 60: dpdkonmetal.VNIRouteMsg
	(*RoutesMsg)(nil),                                 // 61: dpdkonmetal.RoutesMsg
	(*ListFirewallRulesRequest)(nil),                  // 62: dpdkonmetal.ListFirewallRulesRequest
	(*ListFirewallRulesResponse)(nil),                 // 63: dpdkonmetal.ListFirewallRulesResponse
	(*GetFirewallRuleRequest)(nil),                    // 64: dpdkonmetal.GetFirewallRuleRequest
	(*GetFirewallRuleResponse)(nil),                   // 65: dpdkonmetal.GetFirewallRuleResponse
	(*DeleteFirewallRuleRequest)(nil),                 // 66: dpdkonmetal.DeleteFirewallRuleRequest
	(*AddFirewallRuleRequest)(nil),                    // 67: dpdkonmetal.AddFirewallRuleRequest
	(*AddFirewallRuleResponse)(nil),                   // 68: dpdkonmetal.AddFirewallRuleResponse
	(*UUIDMsg)(nil),                                   // 69: dpdkonmetal.UUIDMsg
	(*VirtualFunction)(nil),                           // 70: dpdkonmetal.VirtualFunction
	(*CreateInterfaceResponse)(nil),                   // 71: dpdkonmetal.CreateInterfaceResponse
	(*Route)(nil),                                     // 72: dpdkonmetal.Route
	(*IsVniInUseRequest)(nil),                         // 73: dpdkonmetal.IsVniInUseRequest
	(*IsVniInUseResponse)(nil),                        // 74: dpdkonmetal.IsVniInUseResponse
	(*ResetVniRequest)(nil),                           // 75: dpdkonmetal.ResetVniRequest
	(*GetVersionRequest)(nil),                         // 76: dpdkonmetal.GetVersionRequest
	(*GetVersionResponse)(nil),                        // 77: dpdkonmetal.GetVersionResponse
}
var file_proto_dpdk_proto_depIdxs = []int32{
	7,   // 0: dpdkonmetal.CreateInterfaceLoadBalancerPrefixResponse.status:type_name -> dpdkonmetal.Status
	7,   // 1: dpdkonmetal.IpAdditionResponse.status:type_name -> dpdkonmetal.Status
	7,   // 2: dpdkonmetal.AddNATResponse.status:type_name -> dpdkonmetal.Status
	7,   // 3: dpdkonmetal.GetNATResponse.status:type_name -> dpdkonmetal.Status
	33,  // 4: dpdkonmetal.GetNATResponse.natVIPIP:type_name -> dpdkonmetal.NATIP
	7,   // 5: dpdkonmetal.CreateLoadBalancerResponse.status:type_name -> dpdkonmetal.Status
	1,   // 6: dpdkonmetal.Prefix.ipVersion:type_name -> dpdkonmetal.IPVersion
	1,   // 7: dpdkonmetal.LBPrefix.ipVersion:type_name -> dpdkonmetal.IPVersion
	14,  // 8: dpdkonmetal.InitConfig.underlayIPv6Prefix:type_name -> dpdkonmetal.Prefix
	19,  // 9: dpdkonmetal.ProtocolFilter.icmp:type_name -> dpdkonmetal.ICMPFilter
	20,  // 10: dpdkonmetal.ProtocolFilter.tcp:type_name -> dpdkonmetal.TCPFilter
	21,  // 11: dpdkonmetal.ProtocolFilter.udp:type_name -> dpdkonmetal.UDPFilter
	3,   // 12: dpdkonmetal.FirewallRule.direction:type_name -> dpdkonmetal.TrafficDirection
	4,   // 13: dpdkonmetal.FirewallRule.action:type_name -> dpdkonmetal.FirewallAction
	1,   // 14: dpdkonmetal.FirewallRule.ipVersion:type_name -> dpdkonmetal.IPVersion
	14,  // 15: dpdkonmetal.FirewallRule.sourcePrefix:type_name -> dpdkonmetal.Prefix
	14,  // 16: dpdkonmetal.FirewallRule.destinationPrefix:type_name -> dpdkonmetal.Prefix
	18,  // 17: dpdkonmetal.FirewallRule.protocolFilter:type_name -> dpdkonmetal.ProtocolFilter
	1,   // 18: dpdkonmetal.IPConfig.ipVersion:type_name -> dpdkonmetal.IPVersion
	17,  // 19: dpdkonmetal.IPConfig.pxeConfig:type_name -> dpdkonmetal.PXEConfig
	22,  // 20: dpdkonmetal.IPConfig.firewallRules:type_name -> dpdkonmetal.FirewallRule
	14,  // 21: dpdkonmetal.IPConfig.interfacePrefixes:type_name -> dpdkonmetal.Prefix
	0,   // 22: dpdkonmetal.CreateInterfaceRequest.interfaceType:type_name -> dpdkonmetal.InterfaceType
	23,  // 23: dpdkonmetal.CreateInterfaceRequest.ipv4Config:type_name -> dpdkonmetal.IPConfig
	23,  // 24: dpdkonmetal.CreateInterfaceRequest.ipv6Config:type_name -> dpdkonmetal.IPConfig
	24,  // 25: dpdkonmetal.CreateInterfaceRequest.throttlingConfig:type_name -> dpdkonmetal.ThrottlingConfig
	24,  // 26: dpdkonmetal.Interface.throttlingConfig:type_name -> dpdkonmetal.ThrottlingConfig
	7,   // 27: dpdkonmetal.GetInterfaceResponse.status:type_name -> dpdkonmetal.Status
	26,  // 28: dpdkonmetal.GetInterfaceResponse.interface:type_name -> dpdkonmetal.Interface
	15,  // 29: dpdkonmetal.ListInterfaceLoadBalancerPrefixesResponse.prefixes:type_name -> dpdkonmetal.LBPrefix
	7,   // 30: dpdkonmetal.ListInterfaceLoadBalancerPrefixesResponse.status:type_name -> dpdkonmetal.Status
	7,   // 31: dpdkonmetal.InterfaceVIPIP.status:type_name -> dpdkonmetal.Status
	1,   // 32: dpdkonmetal.InterfaceVIPIP.ipVersion:type_name -> dpdkonmetal.IPVersion
	1,   // 33: dpdkonmetal.LBIP.ipVersion:type_name -> dpdkonmetal.IPVersion
	1,   // 34: dpdkonmetal.NATIP.ipVersion:type_name -> dpdkonmetal.IPVersion
	31,  // 35: dpdkonmetal.InterfaceVIPMsg.interfaceVIPIP:type_name -> dpdkonmetal.InterfaceVIPIP
	2,   // 36: dpdkonmetal.LBPort.protocol:type_name -> dpdkonmetal.Protocol
	7,   // 37: dpdkonmetal.GetLoadBalancerTargetsResponse.status:type_name -> dpdkonmetal.Status
	32,  // 38: dpdkonmetal.GetLoadBalancerTargetsResponse.targetIPs:type_name -> dpdkonmetal.LBIP
	7,   // 39: dpdkonmetal.GetLoadBalancerResponse.status:type_name -> dpdkonmetal.Status
	32,  // 40: dpdkonmetal.GetLoadBalancerResponse.lbVipIP:type_name -> dpdkonmetal.LBIP
	38,  // 41: dpdkonmetal.GetLoadBalancerResponse.lbports:type_name -> dpdkonmetal.LBPort
	32,  // 42: dpdkonmetal.CreateLoadBalancerRequest.lbVipIP:type_name -> dpdkonmetal.LBIP
	38,  // 43: dpdkonmetal.CreateLoadBalancerRequest.lbports:type_name -> dpdkonmetal.LBPort
	32,  // 44: dpdkonmetal.AddLoadBalancerTargetRequest.targetIP:type_name -> dpdkonmetal.LBIP
	32,  // 45: dpdkonmetal.DeleteLoadBalancerTargetRequest.targetIP:type_name -> dpdkonmetal.LBIP
	26,  // 46: dpdkonmetal.InterfacesMsg.interfaces:type_name -> dpdkonmetal.Interface
	7,   // 47: dpdkonmetal.InterfacesMsg.status:type_name -> dpdkonmetal.Status
	33,  // 48: dpdkonmetal.AddNATRequest.natVIPIP:type_name -> dpdkonmetal.NATIP
	33,  // 49: dpdkonmetal.GetNATInfoRequest.natVIPIP:type_name -> dpdkonmetal.NATIP
	5,   // 50: dpdkonmetal.GetNATInfoRequest.natInfoType:type_name -> dpdkonmetal.NATInfoType
	1,   // 51: dpdkonmetal.NATInfoEntry.ipVersion:type_name -> dpdkonmetal.IPVersion
	33,  // 52: dpdkonmetal.GetNATInfoResponse.natVIPIP:type_name -> dpdkonmetal.NATIP
	5,   // 53: dpdkonmetal.GetNATInfoResponse.natInfoType:type_name -> dpdkonmetal.NATInfoType
	48,  // 54: dpdkonmetal.GetNATInfoResponse.natInfoEntries:type_name -> dpdkonmetal.NATInfoEntry
	7,   // 55: dpdkonmetal.GetNATInfoResponse.status:type_name -> dpdkonmetal.Status
	33,  // 56: dpdkonmetal.AddNeighborNATRequest.natVIPIP:type_name -> dpdkonmetal.NATIP
	33,  // 57: dpdkonmetal.DeleteNeighborNATRequest.natVIPIP:type_name -> dpdkonmetal.NATIP
	27,  // 58: dpdkonmetal.ThrottlingConfigMsg.interfaceID:type_name -> dpdkonmetal.InterfaceIDMsg
	24,  // 59: dpdkonmetal.ThrottlingConfigMsg.throttlingConfig:type_name -> dpdkonmetal.ThrottlingConfig
	27,  // 60: dpdkonmetal.CreateInterfaceLoadBalancerPrefixRequest.interfaceID:type_name -> dpdkonmetal.InterfaceIDMsg
	14,  // 61: dpdkonmetal.CreateInterfaceLoadBalancerPrefixRequest.prefix:type_name -> dpdkonmetal.Prefix
	27,  // 62: dpdkonmetal.DeleteInterfaceLoadBalancerPrefixRequest.interfaceID:type_name -> dpdkonmetal.InterfaceIDMsg
	14,  // 63: dpdkonmetal.DeleteInterfaceLoadBalancerPrefixRequest.prefix:type_name -> dpdkonmetal.Prefix
	27,  // 64: dpdkonmetal.InterfacePrefixMsg.interfaceID:type_name -> dpdkonmetal.InterfaceIDMsg
	14,  // 65: dpdkonmetal.InterfacePrefixMsg.prefix:type_name -> dpdkonmetal.Prefix
	14,  // 66: dpdkonmetal.PrefixesMsg.prefixes:type_name -> dpdkonmetal.Prefix
	7,   // 67: dpdkonmetal.PrefixesMsg.status:type_name -> dpdkonmetal.Status
	59,  // 68: dpdkonmetal.VNIRouteMsg.vni:type_name -> dpdkonmetal.VNIMsg
	72,  // 69: dpdkonmetal.VNIRouteMsg.route:type_name -> dpdkonmetal.Route
	72,  // 70: dpdkonmetal.RoutesMsg.routes:type_name -> dpdkonmetal.Route
	7,   // 71: dpdkonmetal.RoutesMsg.status:type_name -> dpdkonmetal.Status
	22,  // 72: dpdkonmetal.ListFirewallRulesResponse.rules:type_name -> dpdkonmetal.FirewallRule
	7,   // 73: dpdkonmetal.ListFirewallRulesResponse.status:type_name -> dpdkonmetal.Status
	7,   // 74: dpdkonmetal.GetFirewallRuleResponse.status:type_name -> dpdkonmetal.Status
	22,  // 75: dpdkonmetal.GetFirewallRuleResponse.rule:type_name -> dpdkonmetal.FirewallRule
	22,  // 76: dpdkonmetal.AddFirewallRuleRequest.rule:type_name -> dpdkonmetal.FirewallRule
	7,   // 77: dpdkonmetal.AddFirewallRuleResponse.status:type_name -> dpdkonmetal.Status
	9,   // 78: dpdkonmetal.CreateInterfaceResponse.response:type_name -> dpdkonmetal.IpAdditionResponse
	70,  // 79: dpdkonmetal.CreateInterfaceResponse.vf:type_name -> dpdkonmetal.VirtualFunction
	1,   // 80: dpdkonmetal.Route.ipVersion:type_name -> dpdkonmetal.IPVersion
	14,  // 81: dpdkonmetal.Route.prefix:type_name -> dpdkonmetal.Prefix
	6,   // 82: dpdkonmetal.IsVniInUseRequest.type:type_name -> dpdkonmetal.VniType
	7,   // 83: dpdkonmetal.IsVniInUseResponse.status:type_name -> dpdkonmetal.Status
	6,   // 84: dpdkonmetal.ResetVniRequest.type:type_name -> dpdkonmetal.VniType
	7,   // 85: dpdkonmetal.GetVersionResponse.status:type_name -> dpdkonmetal.Status
	13,  // 86: dpdkonmetal.DPDKonmetal.initialized:input_type -> dpdkonmetal.Empty
	16,  // 87: dpdkonmetal.DPDKonmetal.init:input_type -> dpdkonmetal.InitConfig
	76,  // 88: dpdkonmetal.DPDKonmetal.getVersion:input_type -> dpdkonmetal.GetVersionRequest
	13,  // 89: dpdkonmetal.DPDKonmetal.listInterfaces:input_type -> dpdkonmetal.Empty
	27,  // 90: dpdkonmetal.DPDKonmetal.getInterface:input_type -> dpdkonmetal.InterfaceIDMsg
	25,  // 91: dpdkonmetal.DPDKonmetal.createInterface:input_type -> dpdkonmetal.CreateInterfaceRequest
	27,  // 92: dpdkonmetal.DPDKonmetal.deleteInterface:input_type -> dpdkonmetal.InterfaceIDMsg
	54,  // 93: dpdkonmetal.DPDKonmetal.updateThrottlingConfig:input_type -> dpdkonmetal.ThrottlingConfigMsg
	27,  // 94: dpdkonmetal.DPDKonmetal.listInterfacePrefixes:input_type -> dpdkonmetal.InterfaceIDMsg
	57,  // 95: dpdkonmetal.DPDKonmetal.addInterfacePrefix:input_type -> dpdkonmetal.InterfacePrefixMsg
	57,  // 96: dpdkonmetal.DPDKonmetal.deleteInterfacePrefix:input_type -> dpdkonmetal.InterfacePrefixMsg
	29,  // 97: dpdkonmetal.DPDKonmetal.listInterfaceLoadBalancerPrefixes:input_type -> dpdkonmetal.ListInterfaceLoadBalancerPrefixesRequest
	55,  // 98: dpdkonmetal.DPDKonmetal.createInterfaceLoadBalancerPrefix:input_type -> dpdkonmetal.CreateInterfaceLoadBalancerPrefixRequest
	56,  // 99: dpdkonmetal.DPDKonmetal.deleteInterfaceLoadBalancerPrefix:input_type -> dpdkonmetal.DeleteInterfaceLoadBalancerPrefixRequest
	34,  // 100: dpdkonmetal.DPDKonmetal.addInterfaceVIP:input_type -> dpdkonmetal.InterfaceVIPMsg
	27,  // 101: dpdkonmetal.DPDKonmetal.getInterfaceVIP:input_type -> dpdkonmetal.InterfaceIDMsg
	27,  // 102: dpdkonmetal.DPDKonmetal.deleteInterfaceVIP:input_type -> dpdkonmetal.InterfaceIDMsg
	41,  // 103: dpdkonmetal.DPDKonmetal.createLoadBalancer:input_type -> dpdkonmetal.CreateLoadBalancerRequest
	35,  // 104: dpdkonmetal.DPDKonmetal.getLoadBalancer:input_type -> dpdkonmetal.GetLoadBalancerRequest
	37,  // 105: dpdkonmetal.DPDKonmetal.deleteLoadBalancer:input_type -> dpdkonmetal.DeleteLoadBalancerRequest
	42,  // 106: dpdkonmetal.DPDKonmetal.addLoadBalancerTarget:input_type -> dpdkonmetal.AddLoadBalancerTargetRequest
	36,  // 107: dpdkonmetal.DPDKonmetal.getLoadBalancerTargets:input_type -> dpdkonmetal.GetLoadBalancerTargetsRequest
	43,  // 108: dpdkonmetal.DPDKonmetal.deleteLoadBalancerTarget:input_type -> dpdkonmetal.DeleteLoadBalancerTargetRequest
	45,  // 109: dpdkonmetal.DPDKonmetal.addNAT:input_type -> dpdkonmetal.AddNATRequest
	46,  // 110: dpdkonmetal.DPDKonmetal.getNAT:input_type -> dpdkonmetal.GetNATRequest
	50,  // 111: dpdkonmetal.DPDKonmetal.deleteNAT:input_type -> dpdkonmetal.DeleteNATRequest
	51,  // 112: dpdkonmetal.DPDKonmetal.addNeighborNAT:input_type -> dpdkonmetal.AddNeighborNATRequest
	52,  // 113: dpdkonmetal.DPDKonmetal.deleteNeighborNAT:input_type -> dpdkonmetal.DeleteNeighborNATRequest
	47,  // 114: dpdkonmetal.DPDKonmetal.getNATInfo:input_type -> dpdkonmetal.GetNATInfoRequest
	59,  // 115: dpdkonmetal.DPDKonmetal.listRoutes:input_type -> dpdkonmetal.VNIMsg
	60,  // 116: dpdkonmetal.DPDKonmetal.addRoute:input_type -> dpdkonmetal.VNIRouteMsg
	60,  // 117: dpdkonmetal.DPDKonmetal.deleteRoute:input_type -> dpdkonmetal.VNIRouteMsg
	73,  // 118: dpdkonmetal.DPDKonmetal.isVniInUse:input_type -> dpdkonmetal.IsVniInUseRequest
	75,  // 119: dpdkonmetal.DPDKonmetal.resetVni:input_type -> dpdkonmetal.ResetVniRequest
	62,  // 120: dpdkonmetal.DPDKonmetal.listFirewallRules:input_type -> dpdkonmetal.ListFirewallRulesRequest
	67,  // 121: dpdkonmetal.DPDKonmetal.addFirewallRule:input_type -> dpdkonmetal.AddFirewallRuleRequest
	64,  // 122: dpdkonmetal.DPDKonmetal.getFirewallRule:input_type -> dpdkonmetal.GetFirewallRuleRequest
	66,  // 123: dpdkonmetal.DPDKonmetal.deleteFirewallRule:input_type -> dpdkonmetal.DeleteFirewallRuleRequest
	69,  // 124: dpdkonmetal.DPDKonmetal.initialized:output_type -> dpdkonmetal.UUIDMsg
	7,   // 125: dpdkonmetal.DPDKonmetal.init:output_type -> dpdkonmetal.Status
	77,  // 126: dpdkonmetal.DPDKonmetal.getVersion:output_type -> dpdkonmetal.GetVersionResponse
	44,  // 127: dpdkonmetal.DPDKonmetal.listInterfaces:output_type -> dpdkonmetal.InterfacesMsg
	28,  // 128: dpdkonmetal.DPDKonmetal.getInterface:output_type -> dpdkonmetal.GetInterfaceResponse
	71,  // 129: dpdkonmetal.DPDKonmetal.createInterface:output_type -> dpdkonmetal.CreateInterfaceResponse
	7,   // 130: dpdkonmetal.DPDKonmetal.deleteInterface:output_type -> dpdkonmetal.Status
	7,   // 131: dpdkonmetal.DPDKonmetal.updateThrottlingConfig:output_type -> dpdkonmetal.Status
	58,  // 132: dpdkonmetal.DPDKonmetal.listInterfacePrefixes:output_type -> dpdkonmetal.PrefixesMsg
	9,   // 133: dpdkonmetal.DPDKonmetal.addInterfacePrefix:output_type -> dpdkonmetal.IpAdditionResponse
	7,   // 134: dpdkonmetal.DPDKonmetal.deleteInterfacePrefix:output_type -> dpdkonmetal.Status
	30,  // 135: dpdkonmetal.DPDKonmetal.listInterfaceLoadBalancerPrefixes:output_type -> dpdkonmetal.ListInterfaceLoadBalancerPrefixesResponse
	8,   // 136: dpdkonmetal.DPDKonmetal.createInterfaceLoadBalancerPrefix:output_type -> dpdkonmetal.CreateInterfaceLoadBalancerPrefixResponse
	7,   // 137: dpdkonmetal.DPDKonmetal.deleteInterfaceLoadBalancerPrefix:output_type -> dpdkonmetal.Status
	9,   // 138: dpdkonmetal.DPDKonmetal.addInterfaceVIP:output_type -> dpdkonmetal.IpAdditionResponse
	31,  // 139: dpdkonmetal.DPDKonmetal.getInterfaceVIP:output_type -> dpdkonmetal.InterfaceVIPIP
	7,   // 140: dpdkonmetal.DPDKonmetal.deleteInterfaceVIP:output_type -> dpdkonmetal.Status
	12,  // 141: dpdkonmetal.DPDKonmetal.createLoadBalancer:output_type -> dpdkonmetal.CreateLoadBalancerResponse
	40,  // 142: dpdkonmetal.DPDKonmetal.getLoadBalancer:output_type -> dpdkonmetal.GetLoadBalancerResponse
	7,   // 143: dpdkonmetal.DPDKonmetal.deleteLoadBalancer:output_type -> dpdkonmetal.Status
	7,   // 144: dpdkonmetal.DPDKonmetal.addLoadBalancerTarget:output_type -> dpdkonmetal.Status
	39,  // 145: dpdkonmetal.DPDKonmetal.getLoadBalancerTargets:output_type -> dpdkonmetal.GetLoadBalancerTargetsResponse
	7,   // 146: dpdkonmetal.DPDKonmetal.deleteLoadBalancerTarget:output_type -> dpdkonmetal.Status
	10,  // 147: dpdkonmetal.DPDKonmetal.addNAT:output_type -> dpdkonmetal.AddNATResponse
	11,  // 148: dpdkonmetal.DPDKonmetal.getNAT:output_type -> dpdkonmetal.GetNATResponse
	7,   // 149: dpdkonmetal.DPDKonmetal.deleteNAT:output_type -> dpdkonmetal.Status
	7,   // 150: dpdkonmetal.DPDKonmetal.addNeighborNAT:output_type -> dpdkonmetal.Status
	7,   // 151: dpdkonmetal.DPDKonmetal.deleteNeighborNAT:output_type -> dpdkonmetal.Status
	49,  // 152: dpdkonmetal.DPDKonmetal.getNATInfo:output_type -> dpdkonmetal.GetNATInfoResponse
	61,  // 153: dpdkonmetal.DPDKonmetal.listRoutes:output_type -> dpdkonmetal.RoutesMsg
	7,   // 154: dpdkonmetal.DPDKonmetal.addRoute:output_type -> dpdkonmetal.Status
	7,   // 155: dpdkonmetal.DPDKonmetal.deleteRoute:output_type -> dpdkonmetal.Status
	74,  // 156: dpdkonmetal.DPDKonmetal.isVniInUse:output_type -> dpdkonmetal.IsVniInUseResponse
	7,   // 157: dpdkonmetal.DPDKonmetal.resetVni:output_type -> dpdkonmetal.Status
	63,  // 158: dpdkonmetal.DPDKonmetal.listFirewallRules:output_type -> dpdkonmetal.ListFirewallRulesResponse
	68,  // 159: dpdkonmetal.DPDKonmetal.addFirewallRule:output_type -> dpdkonmetal.AddFirewallRuleResponse
	65,  // 160: dpdkonmetal.DPDKonmetal.getFirewallRule:output_type -> dpdkonmetal.GetFirewallRuleResponse
	7,   // 161: dpdkonmetal.DPDKonmetal.deleteFirewallRule:output_type -> dpdkonmetal.Status
	124, // [124:162] is the sub-list for method output_type
	86,  // [86:124] is the sub-list for method input_type
	86,  // [86:86] is the sub-list for extension type_name
	86,  // [86:86] is the sub-list for extension extendee
	0,   // [0:86] is the sub-list for field type_name
}

func init() { file_proto_dpdk_proto_init() }
func file_proto_dpdk_proto_init() {
	if File_proto_dpdk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_dpdk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceLoadBalancerPrefixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAdditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNATResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNATResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoadBalancerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LBPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXEConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICMPFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDPFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThrottlingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceIDMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterfaceLoadBalancerPrefixesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInterfaceLoadBalancerPrefixesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceVIPIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LBIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NATIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceVIPMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadBalancerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadBalancerTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLoadBalancerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LBPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadBalancerTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadBalancerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLoadBalancerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLoadBalancerTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLoadBalancerTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfacesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNATRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNATRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNATInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NATInfoEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNATInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNATRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNeighborNATRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNeighborNATRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleIDMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThrottlingConfigMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceLoadBalancerPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInterfaceLoadBalancerPrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfacePrefixMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNIMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNIRouteMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFirewallRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFirewallRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirewallRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirewallRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFirewallRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFirewallRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFirewallRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsVniInUseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsVniInUseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetVniRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_dpdk_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ProtocolFilter_Icmp)(nil),
		(*ProtocolFilter_Tcp)(nil),
		(*ProtocolFilter_Udp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_dpdk_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_dpdk_proto_goTypes,
		DependencyIndexes: file_proto_dpdk_proto_depIdxs,
		EnumInfos:         file_proto_dpdk_proto_enumTypes,
		MessageInfos:      file_proto_dpdk_proto_msgTypes,
	}.Build()
	File_proto_dpdk_proto = out.File
	file_proto_dpdk_proto_rawDesc = nil
	file_proto_dpdk_proto_goTypes = nil
	file_proto_dpdk_proto_depIdxs = nil
}
