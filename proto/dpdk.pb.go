/*
 * Copyright (c) 2021 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.5
// source: proto/dpdk.proto

package dpdkproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InterfaceType int32

const (
	InterfaceType_VirtualInterface   InterfaceType = 0
	InterfaceType_BareMetalInterface InterfaceType = 1
)

// Enum value maps for InterfaceType.
var (
	InterfaceType_name = map[int32]string{
		0: "VirtualInterface",
		1: "BareMetalInterface",
	}
	InterfaceType_value = map[string]int32{
		"VirtualInterface":   0,
		"BareMetalInterface": 1,
	}
)

func (x InterfaceType) Enum() *InterfaceType {
	p := new(InterfaceType)
	*p = x
	return p
}

func (x InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[0].Descriptor()
}

func (InterfaceType) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[0]
}

func (x InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceType.Descriptor instead.
func (InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{0}
}

type IPVersion int32

const (
	IPVersion_IPv4 IPVersion = 0
	IPVersion_IPv6 IPVersion = 1
)

// Enum value maps for IPVersion.
var (
	IPVersion_name = map[int32]string{
		0: "IPv4",
		1: "IPv6",
	}
	IPVersion_value = map[string]int32{
		"IPv4": 0,
		"IPv6": 1,
	}
)

func (x IPVersion) Enum() *IPVersion {
	p := new(IPVersion)
	*p = x
	return p
}

func (x IPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[1].Descriptor()
}

func (IPVersion) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[1]
}

func (x IPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IPVersion.Descriptor instead.
func (IPVersion) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{1}
}

type Protocol int32

const (
	Protocol_Undefined Protocol = 0 // "Undefined" will set up a layer 3 firewall rule and does not filter on layer 4 protocol details.
	Protocol_ICMP      Protocol = 1
	Protocol_TCP       Protocol = 6
	Protocol_UDP       Protocol = 17
	Protocol_ICMPv6    Protocol = 58
	Protocol_SCTP      Protocol = 132
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0:   "Undefined",
		1:   "ICMP",
		6:   "TCP",
		17:  "UDP",
		58:  "ICMPv6",
		132: "SCTP",
	}
	Protocol_value = map[string]int32{
		"Undefined": 0,
		"ICMP":      1,
		"TCP":       6,
		"UDP":       17,
		"ICMPv6":    58,
		"SCTP":      132,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[2].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[2]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{2}
}

type TrafficDirection int32

const (
	TrafficDirection_Ingress TrafficDirection = 0
	TrafficDirection_Egress  TrafficDirection = 1
)

// Enum value maps for TrafficDirection.
var (
	TrafficDirection_name = map[int32]string{
		0: "Ingress",
		1: "Egress",
	}
	TrafficDirection_value = map[string]int32{
		"Ingress": 0,
		"Egress":  1,
	}
)

func (x TrafficDirection) Enum() *TrafficDirection {
	p := new(TrafficDirection)
	*p = x
	return p
}

func (x TrafficDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[3].Descriptor()
}

func (TrafficDirection) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[3]
}

func (x TrafficDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficDirection.Descriptor instead.
func (TrafficDirection) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{3}
}

type FirewallAction int32

const (
	FirewallAction_Drop   FirewallAction = 0
	FirewallAction_Accept FirewallAction = 1
)

// Enum value maps for FirewallAction.
var (
	FirewallAction_name = map[int32]string{
		0: "Drop",
		1: "Accept",
	}
	FirewallAction_value = map[string]int32{
		"Drop":   0,
		"Accept": 1,
	}
)

func (x FirewallAction) Enum() *FirewallAction {
	p := new(FirewallAction)
	*p = x
	return p
}

func (x FirewallAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirewallAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dpdk_proto_enumTypes[4].Descriptor()
}

func (FirewallAction) Type() protoreflect.EnumType {
	return &file_proto_dpdk_proto_enumTypes[4]
}

func (x FirewallAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirewallAction.Descriptor instead.
func (FirewallAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{4}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   int32  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type IpAdditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UnderlayRoute []byte  `protobuf:"bytes,2,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
}

func (x *IpAdditionResponse) Reset() {
	*x = IpAdditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpAdditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpAdditionResponse) ProtoMessage() {}

func (x *IpAdditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpAdditionResponse.ProtoReflect.Descriptor instead.
func (*IpAdditionResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{1}
}

func (x *IpAdditionResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *IpAdditionResponse) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{2}
}

type Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion    IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Address      []byte    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`            // can hold 4 bytes (IPv4) or 16 bytes (IPv6)
	PrefixLength uint32    `protobuf:"varint,3,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"` // max length is 32 for IPv4 and 128 for IPv6
}

func (x *Prefix) Reset() {
	*x = Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prefix) ProtoMessage() {}

func (x *Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prefix.ProtoReflect.Descriptor instead.
func (*Prefix) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{3}
}

func (x *Prefix) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *Prefix) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Prefix) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

type InitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnderlayIPv6Prefix *Prefix  `protobuf:"bytes,1,opt,name=underlayIPv6Prefix,proto3" json:"underlayIPv6Prefix,omitempty"` // prefix in the underlay network that is routed to the DPDK app
	UplinkPorts        []string `protobuf:"bytes,2,rep,name=uplinkPorts,proto3" json:"uplinkPorts,omitempty"`               // Linux name of the NICs that are connected to the Leaf Switches
	PfNames            []string `protobuf:"bytes,3,rep,name=pfNames,proto3" json:"pfNames,omitempty"`                       // Linux name of the Physical Functions, that Virtual Functions will be derived from
}

func (x *InitConfig) Reset() {
	*x = InitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitConfig) ProtoMessage() {}

func (x *InitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitConfig.ProtoReflect.Descriptor instead.
func (*InitConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{4}
}

func (x *InitConfig) GetUnderlayIPv6Prefix() *Prefix {
	if x != nil {
		return x.UnderlayIPv6Prefix
	}
	return nil
}

func (x *InitConfig) GetUplinkPorts() []string {
	if x != nil {
		return x.UplinkPorts
	}
	return nil
}

func (x *InitConfig) GetPfNames() []string {
	if x != nil {
		return x.PfNames
	}
	return nil
}

type PXEConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextServer   string `protobuf:"bytes,1,opt,name=nextServer,proto3" json:"nextServer,omitempty"`
	BootFileName string `protobuf:"bytes,2,opt,name=bootFileName,proto3" json:"bootFileName,omitempty"`
}

func (x *PXEConfig) Reset() {
	*x = PXEConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PXEConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXEConfig) ProtoMessage() {}

func (x *PXEConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXEConfig.ProtoReflect.Descriptor instead.
func (*PXEConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{5}
}

func (x *PXEConfig) GetNextServer() string {
	if x != nil {
		return x.NextServer
	}
	return ""
}

func (x *PXEConfig) GetBootFileName() string {
	if x != nil {
		return x.BootFileName
	}
	return ""
}

// Firewall Rules can be inserted and removed while the interface is running. In the C code probably it makes sense to use linked lists.
// Firewall rules have an order and may result in accepting or dropping a packet.
// When a packet matches a firewall rule, the defined action is taken. No further firewall rules will be evaluated thereafter.
type FirewallRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ruleID: UUID - empty when inserting new rule
	RuleID []byte `protobuf:"bytes,1,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
	// insertAfterRuleID: UUID reference to next FirewallRule
	// used to define the order when inserting new rules
	// when 0 or empty, insert the rule on the firewall rules list's first position
	InsertAfterRuleID []byte           `protobuf:"bytes,2,opt,name=insertAfterRuleID,proto3" json:"insertAfterRuleID,omitempty"`
	Direction         TrafficDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=dpdkonmetal.TrafficDirection" json:"direction,omitempty"`
	Action            FirewallAction   `protobuf:"varint,4,opt,name=action,proto3,enum=dpdkonmetal.FirewallAction" json:"action,omitempty"`
	IpVersion         IPVersion        `protobuf:"varint,5,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	SourcePrefix      *Prefix          `protobuf:"bytes,6,opt,name=sourcePrefix,proto3" json:"sourcePrefix,omitempty"`
	DestinationPrefix *Prefix          `protobuf:"bytes,7,opt,name=destinationPrefix,proto3" json:"destinationPrefix,omitempty"`
	Protocol          Protocol         `protobuf:"varint,8,opt,name=protocol,proto3,enum=dpdkonmetal.Protocol" json:"protocol,omitempty"`
	// TCP / UDP / SCTP filters
	SourcePortRangeLower      int32 `protobuf:"varint,9,opt,name=sourcePortRangeLower,proto3" json:"sourcePortRangeLower,omitempty"` // -1 matches all source ports
	SourcePortRangeUpper      int32 `protobuf:"varint,10,opt,name=sourcePortRangeUpper,proto3" json:"sourcePortRangeUpper,omitempty"`
	DestinationPortRangeLower int32 `protobuf:"varint,11,opt,name=destinationPortRangeLower,proto3" json:"destinationPortRangeLower,omitempty"` // -1 matches all destination ports
	DestinationPortRangeUpper int32 `protobuf:"varint,12,opt,name=destinationPortRangeUpper,proto3" json:"destinationPortRangeUpper,omitempty"`
	// ICMP filters
	IcmpCode int32 `protobuf:"varint,13,opt,name=icmpCode,proto3" json:"icmpCode,omitempty"` // -1 matches all ICMP Codes
	IcmpType int32 `protobuf:"varint,14,opt,name=icmpType,proto3" json:"icmpType,omitempty"` // -1 matches all ICMP Types
}

func (x *FirewallRule) Reset() {
	*x = FirewallRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRule) ProtoMessage() {}

func (x *FirewallRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRule.ProtoReflect.Descriptor instead.
func (*FirewallRule) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{6}
}

func (x *FirewallRule) GetRuleID() []byte {
	if x != nil {
		return x.RuleID
	}
	return nil
}

func (x *FirewallRule) GetInsertAfterRuleID() []byte {
	if x != nil {
		return x.InsertAfterRuleID
	}
	return nil
}

func (x *FirewallRule) GetDirection() TrafficDirection {
	if x != nil {
		return x.Direction
	}
	return TrafficDirection_Ingress
}

func (x *FirewallRule) GetAction() FirewallAction {
	if x != nil {
		return x.Action
	}
	return FirewallAction_Drop
}

func (x *FirewallRule) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *FirewallRule) GetSourcePrefix() *Prefix {
	if x != nil {
		return x.SourcePrefix
	}
	return nil
}

func (x *FirewallRule) GetDestinationPrefix() *Prefix {
	if x != nil {
		return x.DestinationPrefix
	}
	return nil
}

func (x *FirewallRule) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_Undefined
}

func (x *FirewallRule) GetSourcePortRangeLower() int32 {
	if x != nil {
		return x.SourcePortRangeLower
	}
	return 0
}

func (x *FirewallRule) GetSourcePortRangeUpper() int32 {
	if x != nil {
		return x.SourcePortRangeUpper
	}
	return 0
}

func (x *FirewallRule) GetDestinationPortRangeLower() int32 {
	if x != nil {
		return x.DestinationPortRangeLower
	}
	return 0
}

func (x *FirewallRule) GetDestinationPortRangeUpper() int32 {
	if x != nil {
		return x.DestinationPortRangeUpper
	}
	return 0
}

func (x *FirewallRule) GetIcmpCode() int32 {
	if x != nil {
		return x.IcmpCode
	}
	return 0
}

func (x *FirewallRule) GetIcmpType() int32 {
	if x != nil {
		return x.IcmpType
	}
	return 0
}

type IPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	// DHCP Options
	PrimaryAddress    []byte          `protobuf:"bytes,2,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	Mtu               uint32          `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	DhcpHostname      string          `protobuf:"bytes,4,opt,name=dhcpHostname,proto3" json:"dhcpHostname,omitempty"`
	DhcpDomainname    string          `protobuf:"bytes,5,opt,name=dhcpDomainname,proto3" json:"dhcpDomainname,omitempty"`
	PxeConfig         *PXEConfig      `protobuf:"bytes,6,opt,name=pxeConfig,proto3" json:"pxeConfig,omitempty"`
	Ntp               []string        `protobuf:"bytes,7,rep,name=ntp,proto3" json:"ntp,omitempty"`
	Dns               [][]byte        `protobuf:"bytes,8,rep,name=dns,proto3" json:"dns,omitempty"`
	FirewallRules     []*FirewallRule `protobuf:"bytes,9,rep,name=firewallRules,proto3" json:"firewallRules,omitempty"`
	InterfacePrefixes []*Prefix       `protobuf:"bytes,10,rep,name=interfacePrefixes,proto3" json:"interfacePrefixes,omitempty"`
}

func (x *IPConfig) Reset() {
	*x = IPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPConfig) ProtoMessage() {}

func (x *IPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPConfig.ProtoReflect.Descriptor instead.
func (*IPConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{7}
}

func (x *IPConfig) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *IPConfig) GetPrimaryAddress() []byte {
	if x != nil {
		return x.PrimaryAddress
	}
	return nil
}

func (x *IPConfig) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *IPConfig) GetDhcpHostname() string {
	if x != nil {
		return x.DhcpHostname
	}
	return ""
}

func (x *IPConfig) GetDhcpDomainname() string {
	if x != nil {
		return x.DhcpDomainname
	}
	return ""
}

func (x *IPConfig) GetPxeConfig() *PXEConfig {
	if x != nil {
		return x.PxeConfig
	}
	return nil
}

func (x *IPConfig) GetNtp() []string {
	if x != nil {
		return x.Ntp
	}
	return nil
}

func (x *IPConfig) GetDns() [][]byte {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *IPConfig) GetFirewallRules() []*FirewallRule {
	if x != nil {
		return x.FirewallRules
	}
	return nil
}

func (x *IPConfig) GetInterfacePrefixes() []*Prefix {
	if x != nil {
		return x.InterfacePrefixes
	}
	return nil
}

type ThrottlingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngressPacketsPerSecond  uint32 `protobuf:"varint,1,opt,name=ingressPacketsPerSecond,proto3" json:"ingressPacketsPerSecond,omitempty"`
	IngressMegabitsPerSecond uint32 `protobuf:"varint,2,opt,name=ingressMegabitsPerSecond,proto3" json:"ingressMegabitsPerSecond,omitempty"`
	EgressPacketsPerSecond   uint32 `protobuf:"varint,3,opt,name=egressPacketsPerSecond,proto3" json:"egressPacketsPerSecond,omitempty"`
	EgressMegabitsPerSecond  uint32 `protobuf:"varint,4,opt,name=egressMegabitsPerSecond,proto3" json:"egressMegabitsPerSecond,omitempty"`
	MaxOpenFlows             uint32 `protobuf:"varint,5,opt,name=maxOpenFlows,proto3" json:"maxOpenFlows,omitempty"`
}

func (x *ThrottlingConfig) Reset() {
	*x = ThrottlingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrottlingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottlingConfig) ProtoMessage() {}

func (x *ThrottlingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottlingConfig.ProtoReflect.Descriptor instead.
func (*ThrottlingConfig) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{8}
}

func (x *ThrottlingConfig) GetIngressPacketsPerSecond() uint32 {
	if x != nil {
		return x.IngressPacketsPerSecond
	}
	return 0
}

func (x *ThrottlingConfig) GetIngressMegabitsPerSecond() uint32 {
	if x != nil {
		return x.IngressMegabitsPerSecond
	}
	return 0
}

func (x *ThrottlingConfig) GetEgressPacketsPerSecond() uint32 {
	if x != nil {
		return x.EgressPacketsPerSecond
	}
	return 0
}

func (x *ThrottlingConfig) GetEgressMegabitsPerSecond() uint32 {
	if x != nil {
		return x.EgressMegabitsPerSecond
	}
	return 0
}

func (x *ThrottlingConfig) GetMaxOpenFlows() uint32 {
	if x != nil {
		return x.MaxOpenFlows
	}
	return 0
}

type CreateInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interfaceType defines whether a Bare Metal Interface or a Virtual Interface is created.
	// Both instance types cannot be mixed during a session.
	// Maximum number of instantiated bare metal interfaces is 1.
	// Maximum number of Virtual Interfaces is not defined.
	// If you specify device name, a device with this name will be assigned, if it exists
	// otherwise an error code. If you dont specify any device name, next available VF
	// will be assigned.
	InterfaceType    InterfaceType     `protobuf:"varint,1,opt,name=interfaceType,proto3,enum=dpdkonmetal.InterfaceType" json:"interfaceType,omitempty"`
	InterfaceID      []byte            `protobuf:"bytes,2,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	Vni              uint32            `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	Ipv4Config       *IPConfig         `protobuf:"bytes,4,opt,name=ipv4Config,proto3" json:"ipv4Config,omitempty"`
	Ipv6Config       *IPConfig         `protobuf:"bytes,5,opt,name=ipv6Config,proto3" json:"ipv6Config,omitempty"`
	DeviceName       string            `protobuf:"bytes,6,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ThrottlingConfig *ThrottlingConfig `protobuf:"bytes,7,opt,name=throttlingConfig,proto3" json:"throttlingConfig,omitempty"`
}

func (x *CreateInterfaceRequest) Reset() {
	*x = CreateInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceRequest) ProtoMessage() {}

func (x *CreateInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceRequest.ProtoReflect.Descriptor instead.
func (*CreateInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{9}
}

func (x *CreateInterfaceRequest) GetInterfaceType() InterfaceType {
	if x != nil {
		return x.InterfaceType
	}
	return InterfaceType_VirtualInterface
}

func (x *CreateInterfaceRequest) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *CreateInterfaceRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *CreateInterfaceRequest) GetIpv4Config() *IPConfig {
	if x != nil {
		return x.Ipv4Config
	}
	return nil
}

func (x *CreateInterfaceRequest) GetIpv6Config() *IPConfig {
	if x != nil {
		return x.Ipv6Config
	}
	return nil
}

func (x *CreateInterfaceRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *CreateInterfaceRequest) GetThrottlingConfig() *ThrottlingConfig {
	if x != nil {
		return x.ThrottlingConfig
	}
	return nil
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID        []byte            `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	Vni                uint32            `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	PrimaryIPv4Address []byte            `protobuf:"bytes,3,opt,name=primaryIPv4Address,proto3" json:"primaryIPv4Address,omitempty"`
	PrimaryIPv6Address []byte            `protobuf:"bytes,4,opt,name=primaryIPv6Address,proto3" json:"primaryIPv6Address,omitempty"`
	ThrottlingConfig   *ThrottlingConfig `protobuf:"bytes,5,opt,name=throttlingConfig,proto3" json:"throttlingConfig,omitempty"`
	UnderlayRoute      []byte            `protobuf:"bytes,6,opt,name=underlayRoute,proto3" json:"underlayRoute,omitempty"`
	PciDpName          string            `protobuf:"bytes,7,opt,name=pciDpName,proto3" json:"pciDpName,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{10}
}

func (x *Interface) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *Interface) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *Interface) GetPrimaryIPv4Address() []byte {
	if x != nil {
		return x.PrimaryIPv4Address
	}
	return nil
}

func (x *Interface) GetPrimaryIPv6Address() []byte {
	if x != nil {
		return x.PrimaryIPv6Address
	}
	return nil
}

func (x *Interface) GetThrottlingConfig() *ThrottlingConfig {
	if x != nil {
		return x.ThrottlingConfig
	}
	return nil
}

func (x *Interface) GetUnderlayRoute() []byte {
	if x != nil {
		return x.UnderlayRoute
	}
	return nil
}

func (x *Interface) GetPciDpName() string {
	if x != nil {
		return x.PciDpName
	}
	return ""
}

type InterfaceIDMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
}

func (x *InterfaceIDMsg) Reset() {
	*x = InterfaceIDMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceIDMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceIDMsg) ProtoMessage() {}

func (x *InterfaceIDMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceIDMsg.ProtoReflect.Descriptor instead.
func (*InterfaceIDMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{11}
}

func (x *InterfaceIDMsg) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

type GetInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Interface *Interface `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *GetInterfaceResponse) Reset() {
	*x = GetInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInterfaceResponse) ProtoMessage() {}

func (x *GetInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInterfaceResponse.ProtoReflect.Descriptor instead.
func (*GetInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{12}
}

func (x *GetInterfaceResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetInterfaceResponse) GetInterface() *Interface {
	if x != nil {
		return x.Interface
	}
	return nil
}

type InterfaceVIPIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	IpVersion IPVersion `protobuf:"varint,2,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Address   []byte    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"` // Can be both ipv4 and ipv6
}

func (x *InterfaceVIPIP) Reset() {
	*x = InterfaceVIPIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceVIPIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceVIPIP) ProtoMessage() {}

func (x *InterfaceVIPIP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceVIPIP.ProtoReflect.Descriptor instead.
func (*InterfaceVIPIP) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{13}
}

func (x *InterfaceVIPIP) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InterfaceVIPIP) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *InterfaceVIPIP) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type LBIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Address   []byte    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"` // Can be both ipv4 and ipv6
}

func (x *LBIP) Reset() {
	*x = LBIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LBIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBIP) ProtoMessage() {}

func (x *LBIP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBIP.ProtoReflect.Descriptor instead.
func (*LBIP) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{14}
}

func (x *LBIP) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *LBIP) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type InterfaceVIPMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID    []byte          `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	InterfaceVIPIP *InterfaceVIPIP `protobuf:"bytes,2,opt,name=interfaceVIPIP,proto3" json:"interfaceVIPIP,omitempty"`
}

func (x *InterfaceVIPMsg) Reset() {
	*x = InterfaceVIPMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceVIPMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceVIPMsg) ProtoMessage() {}

func (x *InterfaceVIPMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceVIPMsg.ProtoReflect.Descriptor instead.
func (*InterfaceVIPMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{15}
}

func (x *InterfaceVIPMsg) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *InterfaceVIPMsg) GetInterfaceVIPIP() *InterfaceVIPIP {
	if x != nil {
		return x.InterfaceVIPIP
	}
	return nil
}

type LBMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LbVipIP     *LBIP  `protobuf:"bytes,1,opt,name=lbVipIP,proto3" json:"lbVipIP,omitempty"`
	Vni         uint32 `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
	LbBackendIP *LBIP  `protobuf:"bytes,3,opt,name=lbBackendIP,proto3" json:"lbBackendIP,omitempty"`
}

func (x *LBMsg) Reset() {
	*x = LBMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LBMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBMsg) ProtoMessage() {}

func (x *LBMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBMsg.ProtoReflect.Descriptor instead.
func (*LBMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{16}
}

func (x *LBMsg) GetLbVipIP() *LBIP {
	if x != nil {
		return x.LbVipIP
	}
	return nil
}

func (x *LBMsg) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *LBMsg) GetLbBackendIP() *LBIP {
	if x != nil {
		return x.LbBackendIP
	}
	return nil
}

type LBQueryMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LbVipIP *LBIP  `protobuf:"bytes,1,opt,name=lbVipIP,proto3" json:"lbVipIP,omitempty"`
	Vni     uint32 `protobuf:"varint,2,opt,name=vni,proto3" json:"vni,omitempty"`
}

func (x *LBQueryMsg) Reset() {
	*x = LBQueryMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LBQueryMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBQueryMsg) ProtoMessage() {}

func (x *LBQueryMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBQueryMsg.ProtoReflect.Descriptor instead.
func (*LBQueryMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{17}
}

func (x *LBQueryMsg) GetLbVipIP() *LBIP {
	if x != nil {
		return x.LbVipIP
	}
	return nil
}

func (x *LBQueryMsg) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

type LBBackendMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backends []*LBIP `protobuf:"bytes,1,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *LBBackendMsg) Reset() {
	*x = LBBackendMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LBBackendMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LBBackendMsg) ProtoMessage() {}

func (x *LBBackendMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LBBackendMsg.ProtoReflect.Descriptor instead.
func (*LBBackendMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{18}
}

func (x *LBBackendMsg) GetBackends() []*LBIP {
	if x != nil {
		return x.Backends
	}
	return nil
}

type InterfacesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces []*Interface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
}

func (x *InterfacesMsg) Reset() {
	*x = InterfacesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfacesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacesMsg) ProtoMessage() {}

func (x *InterfacesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacesMsg.ProtoReflect.Descriptor instead.
func (*InterfacesMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{19}
}

func (x *InterfacesMsg) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type RuleIDMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleID []byte `protobuf:"bytes,1,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
}

func (x *RuleIDMsg) Reset() {
	*x = RuleIDMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleIDMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleIDMsg) ProtoMessage() {}

func (x *RuleIDMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleIDMsg.ProtoReflect.Descriptor instead.
func (*RuleIDMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{20}
}

func (x *RuleIDMsg) GetRuleID() []byte {
	if x != nil {
		return x.RuleID
	}
	return nil
}

type ThrottlingConfigMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID      *InterfaceIDMsg   `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	ThrottlingConfig *ThrottlingConfig `protobuf:"bytes,2,opt,name=throttlingConfig,proto3" json:"throttlingConfig,omitempty"`
}

func (x *ThrottlingConfigMsg) Reset() {
	*x = ThrottlingConfigMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrottlingConfigMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrottlingConfigMsg) ProtoMessage() {}

func (x *ThrottlingConfigMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrottlingConfigMsg.ProtoReflect.Descriptor instead.
func (*ThrottlingConfigMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{21}
}

func (x *ThrottlingConfigMsg) GetInterfaceID() *InterfaceIDMsg {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *ThrottlingConfigMsg) GetThrottlingConfig() *ThrottlingConfig {
	if x != nil {
		return x.ThrottlingConfig
	}
	return nil
}

type InterfacePrefixMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID *InterfaceIDMsg `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	Prefix      *Prefix         `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *InterfacePrefixMsg) Reset() {
	*x = InterfacePrefixMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfacePrefixMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfacePrefixMsg) ProtoMessage() {}

func (x *InterfacePrefixMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfacePrefixMsg.ProtoReflect.Descriptor instead.
func (*InterfacePrefixMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{22}
}

func (x *InterfacePrefixMsg) GetInterfaceID() *InterfaceIDMsg {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *InterfacePrefixMsg) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type PrefixesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefixes []*Prefix `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *PrefixesMsg) Reset() {
	*x = PrefixesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixesMsg) ProtoMessage() {}

func (x *PrefixesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixesMsg.ProtoReflect.Descriptor instead.
func (*PrefixesMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{23}
}

func (x *PrefixesMsg) GetPrefixes() []*Prefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type VNIMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni uint32 `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty"`
}

func (x *VNIMsg) Reset() {
	*x = VNIMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNIMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNIMsg) ProtoMessage() {}

func (x *VNIMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNIMsg.ProtoReflect.Descriptor instead.
func (*VNIMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{24}
}

func (x *VNIMsg) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

type VNIRouteMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vni   *VNIMsg `protobuf:"bytes,1,opt,name=vni,proto3" json:"vni,omitempty"`
	Route *Route  `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *VNIRouteMsg) Reset() {
	*x = VNIRouteMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VNIRouteMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VNIRouteMsg) ProtoMessage() {}

func (x *VNIRouteMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VNIRouteMsg.ProtoReflect.Descriptor instead.
func (*VNIRouteMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{25}
}

func (x *VNIRouteMsg) GetVni() *VNIMsg {
	if x != nil {
		return x.Vni
	}
	return nil
}

func (x *VNIRouteMsg) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type RoutesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *RoutesMsg) Reset() {
	*x = RoutesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutesMsg) ProtoMessage() {}

func (x *RoutesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutesMsg.ProtoReflect.Descriptor instead.
func (*RoutesMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{26}
}

func (x *RoutesMsg) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type FirewallRuleMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceID []byte        `protobuf:"bytes,1,opt,name=interfaceID,proto3" json:"interfaceID,omitempty"`
	Rule        *FirewallRule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *FirewallRuleMsg) Reset() {
	*x = FirewallRuleMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRuleMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRuleMsg) ProtoMessage() {}

func (x *FirewallRuleMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRuleMsg.ProtoReflect.Descriptor instead.
func (*FirewallRuleMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{27}
}

func (x *FirewallRuleMsg) GetInterfaceID() []byte {
	if x != nil {
		return x.InterfaceID
	}
	return nil
}

func (x *FirewallRuleMsg) GetRule() *FirewallRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type FirewallRulesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*FirewallRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *FirewallRulesMsg) Reset() {
	*x = FirewallRulesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirewallRulesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallRulesMsg) ProtoMessage() {}

func (x *FirewallRulesMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallRulesMsg.ProtoReflect.Descriptor instead.
func (*FirewallRulesMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{28}
}

func (x *FirewallRulesMsg) GetRules() []*FirewallRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type UUIDMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *UUIDMsg) Reset() {
	*x = UUIDMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDMsg) ProtoMessage() {}

func (x *UUIDMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDMsg.ProtoReflect.Descriptor instead.
func (*UUIDMsg) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{29}
}

func (x *UUIDMsg) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type VirtualFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`          // Linux VF NIC device name
	Domain   uint32 `protobuf:"varint,2,opt,name=domain,proto3" json:"domain,omitempty"`     // PCIe Domain
	Bus      uint32 `protobuf:"varint,3,opt,name=bus,proto3" json:"bus,omitempty"`           // PCIe Bus
	Slot     uint32 `protobuf:"varint,4,opt,name=slot,proto3" json:"slot,omitempty"`         // PCIe Slot
	Function uint32 `protobuf:"varint,5,opt,name=function,proto3" json:"function,omitempty"` // PCIe Function
}

func (x *VirtualFunction) Reset() {
	*x = VirtualFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualFunction) ProtoMessage() {}

func (x *VirtualFunction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualFunction.ProtoReflect.Descriptor instead.
func (*VirtualFunction) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{30}
}

func (x *VirtualFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualFunction) GetDomain() uint32 {
	if x != nil {
		return x.Domain
	}
	return 0
}

func (x *VirtualFunction) GetBus() uint32 {
	if x != nil {
		return x.Bus
	}
	return 0
}

func (x *VirtualFunction) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *VirtualFunction) GetFunction() uint32 {
	if x != nil {
		return x.Function
	}
	return 0
}

type CreateInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *IpAdditionResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Vf       *VirtualFunction    `protobuf:"bytes,2,opt,name=vf,proto3" json:"vf,omitempty"` // Holds VF information when a VM has been created.
}

func (x *CreateInterfaceResponse) Reset() {
	*x = CreateInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInterfaceResponse) ProtoMessage() {}

func (x *CreateInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInterfaceResponse.ProtoReflect.Descriptor instead.
func (*CreateInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{31}
}

func (x *CreateInterfaceResponse) GetResponse() *IpAdditionResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateInterfaceResponse) GetVf() *VirtualFunction {
	if x != nil {
		return x.Vf
	}
	return nil
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpVersion      IPVersion `protobuf:"varint,1,opt,name=ipVersion,proto3,enum=dpdkonmetal.IPVersion" json:"ipVersion,omitempty"`
	Prefix         *Prefix   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	NexthopVNI     uint32    `protobuf:"varint,3,opt,name=nexthopVNI,proto3" json:"nexthopVNI,omitempty"`
	NexthopAddress []byte    `protobuf:"bytes,4,opt,name=nexthopAddress,proto3" json:"nexthopAddress,omitempty"`
	Weight         uint32    `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dpdk_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dpdk_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_proto_dpdk_proto_rawDescGZIP(), []int{32}
}

func (x *Route) GetIpVersion() IPVersion {
	if x != nil {
		return x.IpVersion
	}
	return IPVersion_IPv4
}

func (x *Route) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Route) GetNexthopVNI() uint32 {
	if x != nil {
		return x.NexthopVNI
	}
	return 0
}

func (x *Route) GetNexthopAddress() []byte {
	if x != nil {
		return x.NexthopAddress
	}
	return nil
}

func (x *Route) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

var File_proto_dpdk_proto protoreflect.FileDescriptor

var file_proto_dpdk_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x70, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x22,
	0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x67, 0x0a, 0x12, 0x49, 0x70, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x7c, 0x0a, 0x06, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x8d, 0x01, 0x0a, 0x0a, 0x49, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x09, 0x50, 0x58, 0x45,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f,
	0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc7, 0x05, 0x0a, 0x0c, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x41, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x55,
	0x70, 0x70, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x12, 0x3c, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6d, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x03, 0x0a, 0x08, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x68, 0x63, 0x70, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x68, 0x63, 0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x09, 0x70, 0x78, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50,
	0x58, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x70, 0x78, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x74, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x6e, 0x74, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x10,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x38, 0x0a, 0x17, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x67, 0x61, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x67, 0x61, 0x62, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x38,
	0x0a, 0x17, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x67, 0x61, 0x62, 0x69, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x67, 0x61, 0x62, 0x69, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0xe7, 0x02, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x35, 0x0a,
	0x0a, 0x69, 0x70, 0x76, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x69, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xae, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x50, 0x76,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x50, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x63, 0x69,
	0x44, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x63,
	0x69, 0x44, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x49, 0x50, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x56, 0x0a, 0x04, 0x4c, 0x42, 0x49, 0x50, 0x12, 0x34,
	0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x78,
	0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x4d, 0x73,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x56, 0x49, 0x50, 0x49, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x70,
	0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x49, 0x50, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x49, 0x50, 0x22, 0x7b, 0x0a, 0x05, 0x4c, 0x42, 0x4d, 0x73,
	0x67, 0x12, 0x2b, 0x0a, 0x07, 0x6c, 0x62, 0x56, 0x69, 0x70, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x4c, 0x42, 0x49, 0x50, 0x52, 0x07, 0x6c, 0x62, 0x56, 0x69, 0x70, 0x49, 0x50, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69,
	0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x62, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x50, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x42, 0x49, 0x50, 0x52, 0x0b, 0x6c, 0x62, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x49, 0x50, 0x22, 0x4b, 0x0a, 0x0a, 0x4c, 0x42, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x07, 0x6c, 0x62, 0x56, 0x69, 0x70, 0x49, 0x50, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x4c, 0x42, 0x49, 0x50, 0x52, 0x07, 0x6c, 0x62, 0x56, 0x69, 0x70, 0x49, 0x50,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76,
	0x6e, 0x69, 0x22, 0x3d, 0x0a, 0x0c, 0x4c, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x4c, 0x42, 0x49, 0x50, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x73, 0x22, 0x47, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4d,
	0x73, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x09, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x22,
	0x9f, 0x01, 0x0a, 0x13, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x22, 0x3e, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x4d, 0x73, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x06, 0x56, 0x4e, 0x49, 0x4d, 0x73, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69,
	0x22, 0x5e, 0x0a, 0x0b, 0x56, 0x4e, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x25, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x56, 0x4e, 0x49, 0x4d, 0x73,
	0x67, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x22, 0x37, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x0f, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x2d,
	0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x43, 0x0a,
	0x10, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x4d, 0x73,
	0x67, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x1d, 0x0a, 0x07, 0x55, 0x55, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x7f, 0x0a, 0x0f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x76,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x76, 0x66, 0x22, 0xca, 0x01, 0x0a, 0x05, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x56, 0x4e, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x56, 0x4e, 0x49, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2a, 0x3d, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x10, 0x01, 0x2a, 0x1f, 0x0a, 0x09, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x50, 0x76, 0x36, 0x10, 0x01, 0x2a, 0x4c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x43, 0x50, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x11, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x43, 0x4d, 0x50, 0x76, 0x36, 0x10, 0x3a, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x43, 0x54,
	0x50, 0x10, 0x84, 0x01, 0x2a, 0x2b, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x2a, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10, 0x01, 0x32, 0xd8, 0x0c, 0x0a, 0x0b, 0x44, 0x50,
	0x44, 0x4b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x4d,
	0x73, 0x67, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x12,
	0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x1a, 0x21, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d,
	0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x16, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x15,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d,
	0x73, 0x67, 0x1a, 0x18, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x12, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d,
	0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x61, 0x64, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x12, 0x1c, 0x2e, 0x64,
	0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x0f, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50,
	0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x1a, 0x1b, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x49, 0x50, 0x49, 0x50, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56,
	0x49, 0x50, 0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x1a,
	0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x4c, 0x42, 0x56,
	0x49, 0x50, 0x12, 0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x4c, 0x42, 0x4d, 0x73, 0x67, 0x1a, 0x1f, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x67, 0x65, 0x74,
	0x4c, 0x42, 0x56, 0x49, 0x50, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x17, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x42, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x19, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x42, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4d, 0x73,
	0x67, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x4c, 0x42, 0x56, 0x49, 0x50, 0x12,
	0x12, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x4c, 0x42,
	0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x56, 0x4e, 0x49, 0x4d, 0x73, 0x67, 0x1a, 0x16, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x56, 0x4e, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2e, 0x56, 0x4e, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x64, 0x70, 0x64, 0x6b,
	0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x1a, 0x1d, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d,
	0x65, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x64, 0x70, 0x64,
	0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f,
	0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e,
	0x64, 0x70, 0x64, 0x6b, 0x6f, 0x6e, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x64, 0x70, 0x64, 0x6b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_dpdk_proto_rawDescOnce sync.Once
	file_proto_dpdk_proto_rawDescData = file_proto_dpdk_proto_rawDesc
)

func file_proto_dpdk_proto_rawDescGZIP() []byte {
	file_proto_dpdk_proto_rawDescOnce.Do(func() {
		file_proto_dpdk_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_dpdk_proto_rawDescData)
	})
	return file_proto_dpdk_proto_rawDescData
}

var file_proto_dpdk_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_dpdk_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_proto_dpdk_proto_goTypes = []interface{}{
	(InterfaceType)(0),              // 0: dpdkonmetal.InterfaceType
	(IPVersion)(0),                  // 1: dpdkonmetal.IPVersion
	(Protocol)(0),                   // 2: dpdkonmetal.Protocol
	(TrafficDirection)(0),           // 3: dpdkonmetal.TrafficDirection
	(FirewallAction)(0),             // 4: dpdkonmetal.FirewallAction
	(*Status)(nil),                  // 5: dpdkonmetal.Status
	(*IpAdditionResponse)(nil),      // 6: dpdkonmetal.IpAdditionResponse
	(*Empty)(nil),                   // 7: dpdkonmetal.Empty
	(*Prefix)(nil),                  // 8: dpdkonmetal.Prefix
	(*InitConfig)(nil),              // 9: dpdkonmetal.InitConfig
	(*PXEConfig)(nil),               // 10: dpdkonmetal.PXEConfig
	(*FirewallRule)(nil),            // 11: dpdkonmetal.FirewallRule
	(*IPConfig)(nil),                // 12: dpdkonmetal.IPConfig
	(*ThrottlingConfig)(nil),        // 13: dpdkonmetal.ThrottlingConfig
	(*CreateInterfaceRequest)(nil),  // 14: dpdkonmetal.CreateInterfaceRequest
	(*Interface)(nil),               // 15: dpdkonmetal.Interface
	(*InterfaceIDMsg)(nil),          // 16: dpdkonmetal.InterfaceIDMsg
	(*GetInterfaceResponse)(nil),    // 17: dpdkonmetal.GetInterfaceResponse
	(*InterfaceVIPIP)(nil),          // 18: dpdkonmetal.InterfaceVIPIP
	(*LBIP)(nil),                    // 19: dpdkonmetal.LBIP
	(*InterfaceVIPMsg)(nil),         // 20: dpdkonmetal.InterfaceVIPMsg
	(*LBMsg)(nil),                   // 21: dpdkonmetal.LBMsg
	(*LBQueryMsg)(nil),              // 22: dpdkonmetal.LBQueryMsg
	(*LBBackendMsg)(nil),            // 23: dpdkonmetal.LBBackendMsg
	(*InterfacesMsg)(nil),           // 24: dpdkonmetal.InterfacesMsg
	(*RuleIDMsg)(nil),               // 25: dpdkonmetal.RuleIDMsg
	(*ThrottlingConfigMsg)(nil),     // 26: dpdkonmetal.ThrottlingConfigMsg
	(*InterfacePrefixMsg)(nil),      // 27: dpdkonmetal.InterfacePrefixMsg
	(*PrefixesMsg)(nil),             // 28: dpdkonmetal.PrefixesMsg
	(*VNIMsg)(nil),                  // 29: dpdkonmetal.VNIMsg
	(*VNIRouteMsg)(nil),             // 30: dpdkonmetal.VNIRouteMsg
	(*RoutesMsg)(nil),               // 31: dpdkonmetal.RoutesMsg
	(*FirewallRuleMsg)(nil),         // 32: dpdkonmetal.FirewallRuleMsg
	(*FirewallRulesMsg)(nil),        // 33: dpdkonmetal.FirewallRulesMsg
	(*UUIDMsg)(nil),                 // 34: dpdkonmetal.UUIDMsg
	(*VirtualFunction)(nil),         // 35: dpdkonmetal.VirtualFunction
	(*CreateInterfaceResponse)(nil), // 36: dpdkonmetal.CreateInterfaceResponse
	(*Route)(nil),                   // 37: dpdkonmetal.Route
}
var file_proto_dpdk_proto_depIdxs = []int32{
	5,  // 0: dpdkonmetal.IpAdditionResponse.status:type_name -> dpdkonmetal.Status
	1,  // 1: dpdkonmetal.Prefix.ipVersion:type_name -> dpdkonmetal.IPVersion
	8,  // 2: dpdkonmetal.InitConfig.underlayIPv6Prefix:type_name -> dpdkonmetal.Prefix
	3,  // 3: dpdkonmetal.FirewallRule.direction:type_name -> dpdkonmetal.TrafficDirection
	4,  // 4: dpdkonmetal.FirewallRule.action:type_name -> dpdkonmetal.FirewallAction
	1,  // 5: dpdkonmetal.FirewallRule.ipVersion:type_name -> dpdkonmetal.IPVersion
	8,  // 6: dpdkonmetal.FirewallRule.sourcePrefix:type_name -> dpdkonmetal.Prefix
	8,  // 7: dpdkonmetal.FirewallRule.destinationPrefix:type_name -> dpdkonmetal.Prefix
	2,  // 8: dpdkonmetal.FirewallRule.protocol:type_name -> dpdkonmetal.Protocol
	1,  // 9: dpdkonmetal.IPConfig.ipVersion:type_name -> dpdkonmetal.IPVersion
	10, // 10: dpdkonmetal.IPConfig.pxeConfig:type_name -> dpdkonmetal.PXEConfig
	11, // 11: dpdkonmetal.IPConfig.firewallRules:type_name -> dpdkonmetal.FirewallRule
	8,  // 12: dpdkonmetal.IPConfig.interfacePrefixes:type_name -> dpdkonmetal.Prefix
	0,  // 13: dpdkonmetal.CreateInterfaceRequest.interfaceType:type_name -> dpdkonmetal.InterfaceType
	12, // 14: dpdkonmetal.CreateInterfaceRequest.ipv4Config:type_name -> dpdkonmetal.IPConfig
	12, // 15: dpdkonmetal.CreateInterfaceRequest.ipv6Config:type_name -> dpdkonmetal.IPConfig
	13, // 16: dpdkonmetal.CreateInterfaceRequest.throttlingConfig:type_name -> dpdkonmetal.ThrottlingConfig
	13, // 17: dpdkonmetal.Interface.throttlingConfig:type_name -> dpdkonmetal.ThrottlingConfig
	5,  // 18: dpdkonmetal.GetInterfaceResponse.status:type_name -> dpdkonmetal.Status
	15, // 19: dpdkonmetal.GetInterfaceResponse.interface:type_name -> dpdkonmetal.Interface
	5,  // 20: dpdkonmetal.InterfaceVIPIP.status:type_name -> dpdkonmetal.Status
	1,  // 21: dpdkonmetal.InterfaceVIPIP.ipVersion:type_name -> dpdkonmetal.IPVersion
	1,  // 22: dpdkonmetal.LBIP.ipVersion:type_name -> dpdkonmetal.IPVersion
	18, // 23: dpdkonmetal.InterfaceVIPMsg.interfaceVIPIP:type_name -> dpdkonmetal.InterfaceVIPIP
	19, // 24: dpdkonmetal.LBMsg.lbVipIP:type_name -> dpdkonmetal.LBIP
	19, // 25: dpdkonmetal.LBMsg.lbBackendIP:type_name -> dpdkonmetal.LBIP
	19, // 26: dpdkonmetal.LBQueryMsg.lbVipIP:type_name -> dpdkonmetal.LBIP
	19, // 27: dpdkonmetal.LBBackendMsg.backends:type_name -> dpdkonmetal.LBIP
	15, // 28: dpdkonmetal.InterfacesMsg.interfaces:type_name -> dpdkonmetal.Interface
	16, // 29: dpdkonmetal.ThrottlingConfigMsg.interfaceID:type_name -> dpdkonmetal.InterfaceIDMsg
	13, // 30: dpdkonmetal.ThrottlingConfigMsg.throttlingConfig:type_name -> dpdkonmetal.ThrottlingConfig
	16, // 31: dpdkonmetal.InterfacePrefixMsg.interfaceID:type_name -> dpdkonmetal.InterfaceIDMsg
	8,  // 32: dpdkonmetal.InterfacePrefixMsg.prefix:type_name -> dpdkonmetal.Prefix
	8,  // 33: dpdkonmetal.PrefixesMsg.prefixes:type_name -> dpdkonmetal.Prefix
	29, // 34: dpdkonmetal.VNIRouteMsg.vni:type_name -> dpdkonmetal.VNIMsg
	37, // 35: dpdkonmetal.VNIRouteMsg.route:type_name -> dpdkonmetal.Route
	37, // 36: dpdkonmetal.RoutesMsg.routes:type_name -> dpdkonmetal.Route
	11, // 37: dpdkonmetal.FirewallRuleMsg.rule:type_name -> dpdkonmetal.FirewallRule
	11, // 38: dpdkonmetal.FirewallRulesMsg.rules:type_name -> dpdkonmetal.FirewallRule
	6,  // 39: dpdkonmetal.CreateInterfaceResponse.response:type_name -> dpdkonmetal.IpAdditionResponse
	35, // 40: dpdkonmetal.CreateInterfaceResponse.vf:type_name -> dpdkonmetal.VirtualFunction
	1,  // 41: dpdkonmetal.Route.ipVersion:type_name -> dpdkonmetal.IPVersion
	8,  // 42: dpdkonmetal.Route.prefix:type_name -> dpdkonmetal.Prefix
	7,  // 43: dpdkonmetal.DPDKonmetal.initialized:input_type -> dpdkonmetal.Empty
	9,  // 44: dpdkonmetal.DPDKonmetal.init:input_type -> dpdkonmetal.InitConfig
	7,  // 45: dpdkonmetal.DPDKonmetal.listInterfaces:input_type -> dpdkonmetal.Empty
	16, // 46: dpdkonmetal.DPDKonmetal.getInterface:input_type -> dpdkonmetal.InterfaceIDMsg
	14, // 47: dpdkonmetal.DPDKonmetal.createInterface:input_type -> dpdkonmetal.CreateInterfaceRequest
	16, // 48: dpdkonmetal.DPDKonmetal.deleteInterface:input_type -> dpdkonmetal.InterfaceIDMsg
	26, // 49: dpdkonmetal.DPDKonmetal.updateThrottlingConfig:input_type -> dpdkonmetal.ThrottlingConfigMsg
	16, // 50: dpdkonmetal.DPDKonmetal.listInterfacePrefixes:input_type -> dpdkonmetal.InterfaceIDMsg
	27, // 51: dpdkonmetal.DPDKonmetal.addInterfacePrefix:input_type -> dpdkonmetal.InterfacePrefixMsg
	27, // 52: dpdkonmetal.DPDKonmetal.deleteInterfacePrefix:input_type -> dpdkonmetal.InterfacePrefixMsg
	20, // 53: dpdkonmetal.DPDKonmetal.addInterfaceVIP:input_type -> dpdkonmetal.InterfaceVIPMsg
	16, // 54: dpdkonmetal.DPDKonmetal.getInterfaceVIP:input_type -> dpdkonmetal.InterfaceIDMsg
	16, // 55: dpdkonmetal.DPDKonmetal.deleteInterfaceVIP:input_type -> dpdkonmetal.InterfaceIDMsg
	21, // 56: dpdkonmetal.DPDKonmetal.addLBVIP:input_type -> dpdkonmetal.LBMsg
	22, // 57: dpdkonmetal.DPDKonmetal.getLBVIPBackends:input_type -> dpdkonmetal.LBQueryMsg
	21, // 58: dpdkonmetal.DPDKonmetal.delLBVIP:input_type -> dpdkonmetal.LBMsg
	29, // 59: dpdkonmetal.DPDKonmetal.listRoutes:input_type -> dpdkonmetal.VNIMsg
	30, // 60: dpdkonmetal.DPDKonmetal.addRoute:input_type -> dpdkonmetal.VNIRouteMsg
	30, // 61: dpdkonmetal.DPDKonmetal.deleteRoute:input_type -> dpdkonmetal.VNIRouteMsg
	16, // 62: dpdkonmetal.DPDKonmetal.listFirewallRules:input_type -> dpdkonmetal.InterfaceIDMsg
	32, // 63: dpdkonmetal.DPDKonmetal.addFirewallRule:input_type -> dpdkonmetal.FirewallRuleMsg
	25, // 64: dpdkonmetal.DPDKonmetal.deleteFirewallRule:input_type -> dpdkonmetal.RuleIDMsg
	34, // 65: dpdkonmetal.DPDKonmetal.initialized:output_type -> dpdkonmetal.UUIDMsg
	5,  // 66: dpdkonmetal.DPDKonmetal.init:output_type -> dpdkonmetal.Status
	24, // 67: dpdkonmetal.DPDKonmetal.listInterfaces:output_type -> dpdkonmetal.InterfacesMsg
	17, // 68: dpdkonmetal.DPDKonmetal.getInterface:output_type -> dpdkonmetal.GetInterfaceResponse
	36, // 69: dpdkonmetal.DPDKonmetal.createInterface:output_type -> dpdkonmetal.CreateInterfaceResponse
	5,  // 70: dpdkonmetal.DPDKonmetal.deleteInterface:output_type -> dpdkonmetal.Status
	5,  // 71: dpdkonmetal.DPDKonmetal.updateThrottlingConfig:output_type -> dpdkonmetal.Status
	28, // 72: dpdkonmetal.DPDKonmetal.listInterfacePrefixes:output_type -> dpdkonmetal.PrefixesMsg
	6,  // 73: dpdkonmetal.DPDKonmetal.addInterfacePrefix:output_type -> dpdkonmetal.IpAdditionResponse
	5,  // 74: dpdkonmetal.DPDKonmetal.deleteInterfacePrefix:output_type -> dpdkonmetal.Status
	6,  // 75: dpdkonmetal.DPDKonmetal.addInterfaceVIP:output_type -> dpdkonmetal.IpAdditionResponse
	18, // 76: dpdkonmetal.DPDKonmetal.getInterfaceVIP:output_type -> dpdkonmetal.InterfaceVIPIP
	5,  // 77: dpdkonmetal.DPDKonmetal.deleteInterfaceVIP:output_type -> dpdkonmetal.Status
	6,  // 78: dpdkonmetal.DPDKonmetal.addLBVIP:output_type -> dpdkonmetal.IpAdditionResponse
	23, // 79: dpdkonmetal.DPDKonmetal.getLBVIPBackends:output_type -> dpdkonmetal.LBBackendMsg
	5,  // 80: dpdkonmetal.DPDKonmetal.delLBVIP:output_type -> dpdkonmetal.Status
	31, // 81: dpdkonmetal.DPDKonmetal.listRoutes:output_type -> dpdkonmetal.RoutesMsg
	5,  // 82: dpdkonmetal.DPDKonmetal.addRoute:output_type -> dpdkonmetal.Status
	5,  // 83: dpdkonmetal.DPDKonmetal.deleteRoute:output_type -> dpdkonmetal.Status
	33, // 84: dpdkonmetal.DPDKonmetal.listFirewallRules:output_type -> dpdkonmetal.FirewallRulesMsg
	5,  // 85: dpdkonmetal.DPDKonmetal.addFirewallRule:output_type -> dpdkonmetal.Status
	5,  // 86: dpdkonmetal.DPDKonmetal.deleteFirewallRule:output_type -> dpdkonmetal.Status
	65, // [65:87] is the sub-list for method output_type
	43, // [43:65] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_proto_dpdk_proto_init() }
func file_proto_dpdk_proto_init() {
	if File_proto_dpdk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_dpdk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpAdditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PXEConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThrottlingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceIDMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceVIPIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LBIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceVIPMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LBMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LBQueryMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LBBackendMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfacesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleIDMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThrottlingConfigMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfacePrefixMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNIMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VNIRouteMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRuleMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirewallRulesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dpdk_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_dpdk_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_dpdk_proto_goTypes,
		DependencyIndexes: file_proto_dpdk_proto_depIdxs,
		EnumInfos:         file_proto_dpdk_proto_enumTypes,
		MessageInfos:      file_proto_dpdk_proto_msgTypes,
	}.Build()
	File_proto_dpdk_proto = out.File
	file_proto_dpdk_proto_rawDesc = nil
	file_proto_dpdk_proto_goTypes = nil
	file_proto_dpdk_proto_depIdxs = nil
}
